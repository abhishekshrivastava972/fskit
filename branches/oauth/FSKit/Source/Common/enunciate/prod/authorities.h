//
// This code was generated by Enunciate.
// http://enunciate.codehaus.org/
//
#import <libxml/xmlwriter.h>
#import <libxml/xmlreader.h>
#import <Foundation/Foundation.h>

#ifndef DEBUG_ENUNCIATE
//turn off enunciate debugging.
#define DEBUG_ENUNCIATE 0
#endif

/**
 * Enunciate-specific interfaces and protocols.
 */
#ifndef ENUNCIATE_OBJC_TYPES
#define ENUNCIATE_OBJC_TYPES

/**
 * Protocol defining an Enunciate XML I/O methods.
 */
@protocol EnunciateXML : NSObject

/**
 * Read an instance from XML.
 *
 * @param xml The XML to read.
 */
+ (id<EnunciateXML>) readFromXML: (NSData *) xml;

/**
 * Write this instance as XML.
 *
 * @return The XML.
 */
- (NSData *) writeToXML;

@end /*protocol EnunciateXML*/


/**
 * A basic XML node. Can be an element or an attribute. Used
 * instead of NSXMLElement because it's not supported on all
 * platforms yet.
 */
@interface JAXBBasicXMLNode : NSObject
{
  @private
    NSString *_name;
    NSString *_ns;
    NSString *_prefix;
    NSString *_value;
    NSArray  *_childElements;
    NSArray  *_attributes;
}

/**
 * Accessor for the (local) name of the XML node.
 *
 * @return The (local) name of the XML node.
 */
- (NSString *) name;

/**
 * Accessor for the (local) name of the XML node.
 *
 * @param newName The (local) name of the XML node.
 */
- (void) setName: (NSString *) newName;

/**
 * Accessor for the namespace of the XML node.
 *
 * @return The namespace of the XML node.
 */
- (NSString *) ns;

/**
 * Accessor for the namespace of the XML node.
 *
 * @param newNs The namespace of the XML node.
 */
- (void) setNs: (NSString *) newNs;

/**
 * Accessor for the namespace prefix of the XML node.
 *
 * @return The namespace prefix of the XML node.
 */
- (NSString *) prefix;

/**
 * Accessor for the namespace prefix of the XML node.
 *
 * @param newPrefix The namespace prefix of the XML node.
 */
- (void) setPrefix: (NSString *) newPrefix;

/**
 * Accessor for the value of the XML node.
 *
 * @return The value of the XML node.
 */
- (NSString *) value;

/**
 * Accessor for the value of the XML node.
 *
 * @param newValue The value of the XML node.
 */
- (void) setValue: (NSString *) newValue;

/**
 * Accessor for the child elements of the XML node.
 *
 * @return The child elements of the XML node.
 */
- (NSArray *) childElements;

/**
 * Accessor for the child elements of the XML node.
 *
 * @param newValue The child elements of the XML node.
 */
- (void) setChildElements: (NSArray *) newChildElements;

/**
 * Accessor for the attributes of the XML node.
 *
 * @return The attributes of the XML node.
 */
- (NSArray *) attributes;

/**
 * Accessor for the attributes of the XML node.
 *
 * @param newAttributes The attributes of the XML node.
 */
- (void) setAttributes: (NSArray *) newAttributes;
@end /*interface JAXBBasicXMLNode*/

#endif /* ENUNCIATE_OBJC_TYPES */


/**
 * (no documentation provided)
 */
enum FSV1ErrorLevel
{

  /**
   * (no documentation provided)
   */
  AUTHORITIES_FSAPI_V1_ERRORLEVEL_INFO,

  /**
   * (no documentation provided)
   */
  AUTHORITIES_FSAPI_V1_ERRORLEVEL_WARN,

  /**
   * (no documentation provided)
   */
  AUTHORITIES_FSAPI_V1_ERRORLEVEL_ERROR
};

/**
 * Reads a ErrorLevel from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The ErrorLevel, or NULL if unable to be read.
 */
static enum FSV1ErrorLevel *xmlTextReaderReadFSV1ErrorLevelType(xmlTextReaderPtr reader);

/**
 * Writes a ErrorLevel to XML.
 *
 * @param writer The XML writer.
 * @param _errorLevel The ErrorLevel to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSV1ErrorLevelType(xmlTextWriterPtr writer, enum FSV1ErrorLevel *_errorLevel);

/**
 *  An enumeration of authority name piece types.

 @author Rob Lyon

 */
enum FSAUTHORITIESV1NamePieceType
{

  /**
   *  Given Name

   */
  AUTHORITIES_AUTHORITIES_V1_NAMEPIECETYPE_GIVEN,

  /**
   *  Other Name

   */
  AUTHORITIES_AUTHORITIES_V1_NAMEPIECETYPE_OTHER,

  /**
   *  Prefix Name

   */
  AUTHORITIES_AUTHORITIES_V1_NAMEPIECETYPE_PREFIX,

  /**
   *  Suffix Name

   */
  AUTHORITIES_AUTHORITIES_V1_NAMEPIECETYPE_SUFFIX,

  /**
   *  Family Name

   */
  AUTHORITIES_AUTHORITIES_V1_NAMEPIECETYPE_FAMILY
};

/**
 * Reads a NamePieceType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The NamePieceType, or NULL if unable to be read.
 */
static enum FSAUTHORITIESV1NamePieceType *xmlTextReaderReadFSAUTHORITIESV1NamePieceTypeType(xmlTextReaderPtr reader);

/**
 * Writes a NamePieceType to XML.
 *
 * @param writer The XML writer.
 * @param _namePieceType The NamePieceType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSAUTHORITIESV1NamePieceTypeType(xmlTextWriterPtr writer, enum FSAUTHORITIESV1NamePieceType *_namePieceType);

/**
 *  An enumeration of authority name field types.

 @author Rob Lyon

 */
enum FSAUTHORITIESV1NameFieldType
{

  /**
   *  Given Name

   */
  AUTHORITIES_AUTHORITIES_V1_NAMEFIELDTYPE_GIVEN,

  /**
   *  Prefix Name

   */
  AUTHORITIES_AUTHORITIES_V1_NAMEFIELDTYPE_PREFIX,

  /**
   *  Suffix Name

   */
  AUTHORITIES_AUTHORITIES_V1_NAMEFIELDTYPE_SUFFIX,

  /**
   *  Family Name

   */
  AUTHORITIES_AUTHORITIES_V1_NAMEFIELDTYPE_FAMILY
};

/**
 * Reads a NameFieldType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The NameFieldType, or NULL if unable to be read.
 */
static enum FSAUTHORITIESV1NameFieldType *xmlTextReaderReadFSAUTHORITIESV1NameFieldTypeType(xmlTextReaderPtr reader);

/**
 * Writes a NameFieldType to XML.
 *
 * @param writer The XML writer.
 * @param _nameFieldType The NameFieldType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSAUTHORITIESV1NameFieldTypeType(xmlTextWriterPtr writer, enum FSAUTHORITIESV1NameFieldType *_nameFieldType);

@class FSAUTHORITIESV1DateData;
@class FSAUTHORITIESV1NameEncodings;
@class FSAUTHORITIESV1Name;
@class FSAUTHORITIESV1Dates;
@class FSAUTHORITIESV1NameField;
@class FSAUTHORITIESV1NamePiece;
@class FSAUTHORITIESV1NameVariants;
@class FSAUTHORITIESV1Place;
@class FSAUTHORITIESV1PlacePoint;
@class FSAUTHORITIESV1Places;
@class FSAUTHORITIESV1PlaceReference;
@class FSAUTHORITIESV1PlaceLocation;
@class FSAUTHORITIESV1Names;
@class FSAUTHORITIESV1Culture;
@class FSV1BasicProperty;
@class FSV1BasicError;
@class FSV1BasicElement;
@class FSAUTHORITIESV1Authorities;


/**
 *  An authority date.

 @author Rob Lyon

 */
@interface FSAUTHORITIESV1DateData : NSObject
{
  @private
    BOOL *_valid;
    NSString *_requested;
    NSString *_original;
    BOOL *_ambiguous;
    NSString *_normalized;
    NSString *_numeric;
    NSString *_astro;
    FSAUTHORITIESV1DateData *_earliest;
    FSAUTHORITIESV1DateData *_latest;
}

/**
 * true if the date is valid.
 */
- (BOOL *) valid;

/**
 * true if the date is valid.
 */
- (void) setValid: (BOOL *) newValid;

/**
 * the date requested.
 */
- (NSString *) requested;

/**
 * the date requested.
 */
- (void) setRequested: (NSString *) newRequested;

/**
 * the date original.
 */
- (NSString *) original;

/**
 * the date original.
 */
- (void) setOriginal: (NSString *) newOriginal;

/**
 * true if the date is ambiguous.
 */
- (BOOL *) ambiguous;

/**
 * true if the date is ambiguous.
 */
- (void) setAmbiguous: (BOOL *) newAmbiguous;

/**
 * the date normalization.
 */
- (NSString *) normalized;

/**
 * the date normalization.
 */
- (void) setNormalized: (NSString *) newNormalized;

/**
 * the date numeric.
 */
- (NSString *) numeric;

/**
 * the date numeric.
 */
- (void) setNumeric: (NSString *) newNumeric;

/**
 * the astro day.
 */
- (NSString *) astro;

/**
 * the astro day.
 */
- (void) setAstro: (NSString *) newAstro;

/**
 * the earliest date.
 */
- (FSAUTHORITIESV1DateData *) earliest;

/**
 * the earliest date.
 */
- (void) setEarliest: (FSAUTHORITIESV1DateData *) newEarliest;

/**
 * the latest date.
 */
- (FSAUTHORITIESV1DateData *) latest;

/**
 * the latest date.
 */
- (void) setLatest: (FSAUTHORITIESV1DateData *) newLatest;
@end /* interface FSAUTHORITIESV1DateData */

/**
 *  A name authority name piece group.

 @author Rob Lyon

 */
@interface FSAUTHORITIESV1NameEncodings : NSObject
{
  @private
    NSString *_soundex;
    NSString *_phondex;
    NSString *_nysiis;
}

/**
 * the name piece soundex code.
 */
- (NSString *) soundex;

/**
 * the name piece soundex code.
 */
- (void) setSoundex: (NSString *) newSoundex;

/**
 * the name piece phondex code.
 */
- (NSString *) phondex;

/**
 * the name piece phondex code.
 */
- (void) setPhondex: (NSString *) newPhondex;

/**
 * the name piece NYSIIS code.
 */
- (NSString *) nysiis;

/**
 * the name piece NYSIIS code.
 */
- (void) setNysiis: (NSString *) newNysiis;
@end /* interface FSAUTHORITIESV1NameEncodings */

/**
 *  A name authority name.

 @author Rob Lyon

 */
@interface FSAUTHORITIESV1Name : NSObject
{
  @private
    NSString *_original;
    NSArray *_pieces;
    NSArray *_fields;
}

/**
 * the name original.
 */
- (NSString *) original;

/**
 * the name original.
 */
- (void) setOriginal: (NSString *) newOriginal;

/**
 * a collection of name authority name pieces.
 */
- (NSArray *) pieces;

/**
 * a collection of name authority name pieces.
 */
- (void) setPieces: (NSArray *) newPieces;

/**
 * a collection of name authority name fields.
 */
- (NSArray *) fields;

/**
 * a collection of name authority name fields.
 */
- (void) setFields: (NSArray *) newFields;
@end /* interface FSAUTHORITIESV1Name */

/**
 *  A list of authority dates.

 @author Rob Lyon

 */
@interface FSAUTHORITIESV1Dates : NSObject
{
  @private
    int _count;
    NSString *_version;
    NSArray *_dateItems;
}

/**
 * the number of authority date interpretations.
 */
- (int) count;

/**
 * the number of authority date interpretations.
 */
- (void) setCount: (int) newCount;

/**
 * the date authority version.
 */
- (NSString *) version;

/**
 * the date authority version.
 */
- (void) setVersion: (NSString *) newVersion;

/**
 * a list of authority date interpretations.
 */
- (NSArray *) dateItems;

/**
 * a list of authority date interpretations.
 */
- (void) setDateItems: (NSArray *) newDateItems;
@end /* interface FSAUTHORITIESV1Dates */

/**
 *  A name authority name field.

 @author Rob Lyon

 */
@interface FSAUTHORITIESV1NameField : NSObject
{
  @private
    NSString *_text;
    enum FSAUTHORITIESV1NameFieldType *_type;
}

/**
 * the name field text.
 */
- (NSString *) text;

/**
 * the name field text.
 */
- (void) setText: (NSString *) newText;

/**
 * the name field type.
 */
- (enum FSAUTHORITIESV1NameFieldType *) type;

/**
 * the name field type.
 */
- (void) setType: (enum FSAUTHORITIESV1NameFieldType *) newType;
@end /* interface FSAUTHORITIESV1NameField */

/**
 *  A name authority name piece or segment.

 @author Rob Lyon

 */
@interface FSAUTHORITIESV1NamePiece : NSObject
{
  @private
    NSString *_text;
    enum FSAUTHORITIESV1NamePieceType *_type;
    NSString *_predelimiters;
    NSString *_value;
    NSString *_postdelimiters;
    FSAUTHORITIESV1NameEncodings *_encodings;
    NSArray *_variants;
}

/**
 * the name piece text.
 */
- (NSString *) text;

/**
 * the name piece text.
 */
- (void) setText: (NSString *) newText;

/**
 * the name piece type.
 */
- (enum FSAUTHORITIESV1NamePieceType *) type;

/**
 * the name piece type.
 */
- (void) setType: (enum FSAUTHORITIESV1NamePieceType *) newType;

/**
 * the name piece predelimiters text.
 */
- (NSString *) predelimiters;

/**
 * the name piece predelimiters text.
 */
- (void) setPredelimiters: (NSString *) newPredelimiters;

/**
 * the name piece value.
 */
- (NSString *) value;

/**
 * the name piece value.
 */
- (void) setValue: (NSString *) newValue;

/**
 * the name piece postdelimiters text.
 */
- (NSString *) postdelimiters;

/**
 * the name piece postdelimiters text.
 */
- (void) setPostdelimiters: (NSString *) newPostdelimiters;

/**
 * the name piece encodings.
 */
- (FSAUTHORITIESV1NameEncodings *) encodings;

/**
 * the name piece encodings.
 */
- (void) setEncodings: (FSAUTHORITIESV1NameEncodings *) newEncodings;

/**
 * the name piece variants.
 */
- (NSArray *) variants;

/**
 * the name piece variants.
 */
- (void) setVariants: (NSArray *) newVariants;
@end /* interface FSAUTHORITIESV1NamePiece */

/**
 *  A authority name piece variants.

 @author Rob Lyon

 */
@interface FSAUTHORITIESV1NameVariants : NSObject
{
  @private
    int _id;
    unsigned char _culture;
    NSArray *_variants;
}

/**
 * the name piece variants id.
 */
- (int) id;

/**
 * the name piece variants id.
 */
- (void) setId: (int) newId;

/**
 * the name piece variants culture id.
 */
- (unsigned char) culture;

/**
 * the name piece variants culture id.
 */
- (void) setCulture: (unsigned char) newCulture;

/**
 * a collection of the name piece variants.
 */
- (NSArray *) variants;

/**
 * a collection of the name piece variants.
 */
- (void) setVariants: (NSArray *) newVariants;
@end /* interface FSAUTHORITIESV1NameVariants */

/**
 *  A place authority place.

 @author Rob Lyon

 */
@interface FSAUTHORITIESV1Place : NSObject
{
  @private
    NSString *_id;
    NSString *_iso;
    NSString *_original;
    NSString *_type;
    NSString *_culture;
    NSArray *_normalized;
    NSString *_official;
    FSAUTHORITIESV1PlaceLocation *_location;
    NSArray *_parents;
    NSArray *_children;
    NSArray *_variants;
}

/**
 * the id of the place.
 */
- (NSString *) id;

/**
 * the id of the place.
 */
- (void) setId: (NSString *) newId;

/**
 * the ISO code.
 */
- (NSString *) iso;

/**
 * the ISO code.
 */
- (void) setIso: (NSString *) newIso;

/**
 * the place original.
 */
- (NSString *) original;

/**
 * the place original.
 */
- (void) setOriginal: (NSString *) newOriginal;

/**
 * the place type.
 */
- (NSString *) type;

/**
 * the place type.
 */
- (void) setType: (NSString *) newType;

/**
 * the place culture id.
 */
- (NSString *) culture;

/**
 * the place culture id.
 */
- (void) setCulture: (NSString *) newCulture;

/**
 * a collection of normalized standard names of the place.
 */
- (NSArray *) normalized;

/**
 * a collection of normalized standard names of the place.
 */
- (void) setNormalized: (NSArray *) newNormalized;

/**
 * the official name of the place.
 */
- (NSString *) official;

/**
 * the official name of the place.
 */
- (void) setOfficial: (NSString *) newOfficial;

/**
 * the place location.
 */
- (FSAUTHORITIESV1PlaceLocation *) location;

/**
 * the place location.
 */
- (void) setLocation: (FSAUTHORITIESV1PlaceLocation *) newLocation;

/**
 * A collection of the parent places.
 */
- (NSArray *) parents;

/**
 * A collection of the parent places.
 */
- (void) setParents: (NSArray *) newParents;

/**
 * a collection of the child places.
 */
- (NSArray *) children;

/**
 * a collection of the child places.
 */
- (void) setChildren: (NSArray *) newChildren;

/**
 * a collection of the variant names.
 */
- (NSArray *) variants;

/**
 * a collection of the variant names.
 */
- (void) setVariants: (NSArray *) newVariants;
@end /* interface FSAUTHORITIESV1Place */

/**
 *  A place authority place location.

 @author Rob Lyon

 */
@interface FSAUTHORITIESV1PlacePoint : NSObject
{
  @private
    double _latitude;
    double _longitude;
}

/**
 * the latitude of the place.
 */
- (double) latitude;

/**
 * the latitude of the place.
 */
- (void) setLatitude: (double) newLatitude;

/**
 * the longitude of the place.
 */
- (double) longitude;

/**
 * the longitude of the place.
 */
- (void) setLongitude: (double) newLongitude;
@end /* interface FSAUTHORITIESV1PlacePoint */

/**
 *  A list of place authority places.

 @author Rob Lyon

 */
@interface FSAUTHORITIESV1Places : NSObject
{
  @private
    int _count;
    NSString *_version;
    NSArray *_placeItems;
}

/**
 * the number of authority places.
 */
- (int) count;

/**
 * the number of authority places.
 */
- (void) setCount: (int) newCount;

/**
 * the place authority version.
 */
- (NSString *) version;

/**
 * the place authority version.
 */
- (void) setVersion: (NSString *) newVersion;

/**
 * a list of place authority places.
 */
- (NSArray *) placeItems;

/**
 * a list of place authority places.
 */
- (void) setPlaceItems: (NSArray *) newPlaceItems;
@end /* interface FSAUTHORITIESV1Places */

/**
 *  A place authority place reference.

 @author Rob Lyon

 */
@interface FSAUTHORITIESV1PlaceReference : NSObject
{
  @private
    NSString *_ref;
    NSString *_name;
}

/**
 * the place reference(id).
 */
- (NSString *) ref;

/**
 * the place reference(id).
 */
- (void) setRef: (NSString *) newRef;

/**
 * the standard place name.
 */
- (NSString *) name;

/**
 * the standard place name.
 */
- (void) setName: (NSString *) newName;
@end /* interface FSAUTHORITIESV1PlaceReference */

/**
 *  A place authority place location.

 @author Rob Lyon

 */
@interface FSAUTHORITIESV1PlaceLocation : NSObject
{
  @private
    FSAUTHORITIESV1PlacePoint *_point;
}

/**
 * the point of the place.
 */
- (FSAUTHORITIESV1PlacePoint *) point;

/**
 * the point of the place.
 */
- (void) setPoint: (FSAUTHORITIESV1PlacePoint *) newPoint;
@end /* interface FSAUTHORITIESV1PlaceLocation */

/**
 *  A list of name authority names.

 @author Rob Lyon

 */
@interface FSAUTHORITIESV1Names : NSObject
{
  @private
    int _count;
    NSString *_version;
    NSArray *_nameItems;
}

/**
 * the number of authority names.
 */
- (int) count;

/**
 * the number of authority names.
 */
- (void) setCount: (int) newCount;

/**
 * the name authority version.
 */
- (NSString *) version;

/**
 * the name authority version.
 */
- (void) setVersion: (NSString *) newVersion;

/**
 * a list of name authority names.
 */
- (NSArray *) nameItems;

/**
 * a list of name authority names.
 */
- (void) setNameItems: (NSArray *) newNameItems;
@end /* interface FSAUTHORITIESV1Names */

/**
 *  An authority culture.

 @author Rob Lyon

 */
@interface FSAUTHORITIESV1Culture : NSObject
{
  @private
    NSString *_id;
    NSString *_name;
}

/**
 * the authority culture id.
 */
- (NSString *) id;

/**
 * the authority culture id.
 */
- (void) setId: (NSString *) newId;

/**
 * the authority culture name.
 */
- (NSString *) name;

/**
 * the authority culture name.
 */
- (void) setName: (NSString *) newName;
@end /* interface FSAUTHORITIESV1Culture */

/**
 * (no documentation provided)
 */
@interface FSV1BasicProperty : NSObject
{
  @private
    NSString *_name;
    NSString *_value;
}

/**
 * (no documentation provided)
 */
- (NSString *) name;

/**
 * (no documentation provided)
 */
- (void) setName: (NSString *) newName;

/**
 * (no documentation provided)
 */
- (NSString *) value;

/**
 * (no documentation provided)
 */
- (void) setValue: (NSString *) newValue;
@end /* interface FSV1BasicProperty */

/**
 * (no documentation provided)
 */
@interface FSV1BasicError : NSObject
{
  @private
    enum FSV1ErrorLevel *_level;
    int *_subcode;
    int _code;
    NSString *_message;
    NSString *_details;
}

/**
 * (no documentation provided)
 */
- (enum FSV1ErrorLevel *) level;

/**
 * (no documentation provided)
 */
- (void) setLevel: (enum FSV1ErrorLevel *) newLevel;

/**
 * (no documentation provided)
 */
- (int *) subcode;

/**
 * (no documentation provided)
 */
- (void) setSubcode: (int *) newSubcode;

/**
 * (no documentation provided)
 */
- (int) code;

/**
 * (no documentation provided)
 */
- (void) setCode: (int) newCode;

/**
 * (no documentation provided)
 */
- (NSString *) message;

/**
 * (no documentation provided)
 */
- (void) setMessage: (NSString *) newMessage;

/**
 * (no documentation provided)
 */
- (NSString *) details;

/**
 * (no documentation provided)
 */
- (void) setDetails: (NSString *) newDetails;
@end /* interface FSV1BasicError */

/**
 * (no documentation provided)
 */
@interface FSV1BasicElement : NSObject
{
  @private
    int *_statusCode;
    BOOL *_deprecated;
    NSString *_statusMessage;
    NSString *_version;
    NSArray *_properties;
    NSArray *_errors;
}

/**
 * (no documentation provided)
 */
- (int *) statusCode;

/**
 * (no documentation provided)
 */
- (void) setStatusCode: (int *) newStatusCode;

/**
 * (no documentation provided)
 */
- (BOOL *) deprecated;

/**
 * (no documentation provided)
 */
- (void) setDeprecated: (BOOL *) newDeprecated;

/**
 * (no documentation provided)
 */
- (NSString *) statusMessage;

/**
 * (no documentation provided)
 */
- (void) setStatusMessage: (NSString *) newStatusMessage;

/**
 * (no documentation provided)
 */
- (NSString *) version;

/**
 * (no documentation provided)
 */
- (void) setVersion: (NSString *) newVersion;

/**
 * (no documentation provided)
 */
- (NSArray *) properties;

/**
 * (no documentation provided)
 */
- (void) setProperties: (NSArray *) newProperties;

/**
 * (no documentation provided)
 */
- (NSArray *) errors;

/**
 * (no documentation provided)
 */
- (void) setErrors: (NSArray *) newErrors;
@end /* interface FSV1BasicElement */

/**
 *  @author Ryan Heaton

 */
@interface FSAUTHORITIESV1Authorities : FSV1BasicElement <EnunciateXML>
{
  @private
    FSAUTHORITIESV1Places *_places;
    FSAUTHORITIESV1Names *_names;
    FSAUTHORITIESV1Dates *_dates;
    NSArray *_cultures;
}

/**
 * The authority places.
 */
- (FSAUTHORITIESV1Places *) places;

/**
 * The authority places.
 */
- (void) setPlaces: (FSAUTHORITIESV1Places *) newPlaces;

/**
 * The authority names.
 */
- (FSAUTHORITIESV1Names *) names;

/**
 * The authority names.
 */
- (void) setNames: (FSAUTHORITIESV1Names *) newNames;

/**
 * The authority dates.
 */
- (FSAUTHORITIESV1Dates *) dates;

/**
 * The authority dates.
 */
- (void) setDates: (FSAUTHORITIESV1Dates *) newDates;

/**
 * The authority cultures.
 */
- (NSArray *) cultures;

/**
 * The authority cultures.
 */
- (void) setCultures: (NSArray *) newCultures;
@end /* interface FSAUTHORITIESV1Authorities */
