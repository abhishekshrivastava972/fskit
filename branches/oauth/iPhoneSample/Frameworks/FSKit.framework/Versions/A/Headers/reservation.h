//
// This code was generated by Enunciate.
// http://enunciate.codehaus.org/
//
#import <libxml/xmlwriter.h>
#import <libxml/xmlreader.h>
#import <Foundation/Foundation.h>
#import "enunciate_common.h"
#import "fsv1.h"

/**
 *  @author Ryan Heaton

 */
enum FSRESERVATIONV1EventType
{

  /**
   *  Adoption

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_ADOPTION,

  /**
   *  Adult Christening

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_ADULT_CHRISTENING,

  /**
   *  Non LDS Baptism

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_BAPTISM,

  /**
   *  Non LDS Confirmation

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_CONFIRMATION,

  /**
   *  Bar Mitzvah

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_BAR_MITZVAH,

  /**
   *  Bas Mitzvah

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_BAS_MITZVAH,

  /**
   *  Birth

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_BIRTH,

  /**
   *  Blessing

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_BLESSING,

  /**
   *  Burial

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_BURIAL,

  /**
   *  Christening

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_CHRISTENING,

  /**
   *  Cremation

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_CREMATION,

  /**
   *  Death

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_DEATH,

  /**
   *  Graduation

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_GRADUATION,

  /**
   *  Immigration

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_IMMIGRATION,

  /**
   *  Military Service

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_MILITARY_SERVICE,

  /**
   *  Mission

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_MISSION,

  /**
   *  Move

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_MOVE,

  /**
   *  Naturalization

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_NATURALIZATION,

  /**
   *  Probate

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_PROBATE,

  /**
   *  Retirement

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_RETIREMENT,

  /**
   *  Will

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_WILL,

  /**
   *  Annulment.

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_ANNULMENT,

  /**
   *  Divorce.

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_DIVORCE,

  /**
   *  Divorce Filing.

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_DIVORCE_FILING,

  /**
   *  Engagement

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_ENGAGEMENT,

  /**
   *  Marriage.

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_MARRIAGE,

  /**
   *  Marriage Notice.

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_MARRIAGE_BANNS,

  /**
   *  Marriage Contract.

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_MARRIAGE_CONTRACT,

  /**
   *  Marriage License.

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_MARRIAGE_LICENSE,

  /**
   *  A user-defined event.

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_OTHER,

  /**
   *  Census

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_CENSUS,

  /**
   *  Circumcision

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_CIRCUMCISION,

  /**
   *  Emigration

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_EMIGRATION,

  /**
   *  Excommunication

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_EXCOMMUNICATION,

  /**
   *  First Communion

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_FIRST_COMMUNION,

  /**
   *  First Known Child

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_FIRST_KNOWN_CHILD,

  /**
   *  Funeral

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_FUNERAL,

  /**
   *  Hospitalization

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_HOSPITALIZATION,

  /**
   *  Illness

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_ILLNESS,

  /**
   *  Naming

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_NAMING,

  /**
   *  Marriage Settlement

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_MARRIAGE_SETTLEMENT,

  /**
   *  Miscarriage

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_MISCARRIAGE,

  /**
   *  Ordination

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_ORDINATION,

  /**
   *  Separation

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_SEPARATION,

  /**
   *  Time Only Marriage

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_TIME_ONLY_MARRIAGE,

  /**
   *  Residence
 <p/>
 NOTE: This is for a search event only.

   */
  RESERVATION_RESERVATION_V1_EVENTTYPE_RESIDENCE
};

/**
 * Reads a EventType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The EventType, or NULL if unable to be read.
 */
static enum FSRESERVATIONV1EventType *xmlTextReaderReadFSRESERVATIONV1EventTypeType(xmlTextReaderPtr reader);

/**
 * Writes a EventType to XML.
 *
 * @param writer The XML writer.
 * @param _eventType The EventType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSRESERVATIONV1EventTypeType(xmlTextWriterPtr writer, enum FSRESERVATIONV1EventType *_eventType);

/**
 *  @author Ryan Heaton

 */
enum FSRESERVATIONV1NameFormScript
{

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_NAMEFORMSCRIPT_SPANISH,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_NAMEFORMSCRIPT_PORTUGUESE,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_NAMEFORMSCRIPT_CHINESE,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_NAMEFORMSCRIPT_KANA,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_NAMEFORMSCRIPT_HANGUL,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_NAMEFORMSCRIPT_CYRILLIC
};

/**
 * Reads a NameFormScript from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The NameFormScript, or NULL if unable to be read.
 */
static enum FSRESERVATIONV1NameFormScript *xmlTextReaderReadFSRESERVATIONV1NameFormScriptType(xmlTextReaderPtr reader);

/**
 * Writes a NameFormScript to XML.
 *
 * @param writer The XML writer.
 * @param _nameFormScript The NameFormScript to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSRESERVATIONV1NameFormScriptType(xmlTextWriterPtr writer, enum FSRESERVATIONV1NameFormScript *_nameFormScript);

/**
 *  Ordinance Status

 @author Rob Lyon

 */
enum FSRESERVATIONV1OrdinanceStatus
{

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_ORDINANCESTATUS_NOT_NEEDED,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_ORDINANCESTATUS_RESERVED,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_ORDINANCESTATUS_READY,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_ORDINANCESTATUS_NOT_READY,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_ORDINANCESTATUS_COMPLETED,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_ORDINANCESTATUS_NOT_AVAILABLE,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_ORDINANCESTATUS_NEED_MORE_INFORMATION,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_ORDINANCESTATUS_IN_PROGRESS,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_ORDINANCESTATUS_ON_HOLD,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_ORDINANCESTATUS_CANCELED,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_ORDINANCESTATUS_DELETED,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_ORDINANCESTATUS_INVALID
};

/**
 * Reads a OrdinanceStatus from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The OrdinanceStatus, or NULL if unable to be read.
 */
static enum FSRESERVATIONV1OrdinanceStatus *xmlTextReaderReadFSRESERVATIONV1OrdinanceStatusType(xmlTextReaderPtr reader);

/**
 * Writes a OrdinanceStatus to XML.
 *
 * @param writer The XML writer.
 * @param _ordinanceStatus The OrdinanceStatus to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSRESERVATIONV1OrdinanceStatusType(xmlTextWriterPtr writer, enum FSRESERVATIONV1OrdinanceStatus *_ordinanceStatus);

/**
 * (no documentation provided)
 */
enum FSRESERVATIONV1NotificationCode
{

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_NOTIFICATIONCODE_DESTROY_CARDS_DUPLICATED_BY_TRIP,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_NOTIFICATIONCODE_DESTROY_UNRESERVED_CARDS_FOR_PERSON,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_NOTIFICATIONCODE_ORDINANCES_ALREADY_COMPLETED
};

/**
 * Reads a NotificationCode from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The NotificationCode, or NULL if unable to be read.
 */
static enum FSRESERVATIONV1NotificationCode *xmlTextReaderReadFSRESERVATIONV1NotificationCodeType(xmlTextReaderPtr reader);

/**
 * Writes a NotificationCode to XML.
 *
 * @param writer The XML writer.
 * @param _notificationCode The NotificationCode to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSRESERVATIONV1NotificationCodeType(xmlTextWriterPtr writer, enum FSRESERVATIONV1NotificationCode *_notificationCode);

/**
 * (no documentation provided)
 */
enum FSRESERVATIONV1NotificationLevel
{

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_NOTIFICATIONLEVEL_REQUIRED,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_NOTIFICATIONLEVEL_OPTIONAL
};

/**
 * Reads a NotificationLevel from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The NotificationLevel, or NULL if unable to be read.
 */
static enum FSRESERVATIONV1NotificationLevel *xmlTextReaderReadFSRESERVATIONV1NotificationLevelType(xmlTextReaderPtr reader);

/**
 * Writes a NotificationLevel to XML.
 *
 * @param writer The XML writer.
 * @param _notificationLevel The NotificationLevel to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSRESERVATIONV1NotificationLevelType(xmlTextWriterPtr writer, enum FSRESERVATIONV1NotificationLevel *_notificationLevel);

/**
 *  Ordinance Rollup Status.

 @author Rob Lyon

 */
enum FSRESERVATIONV1RollupStatus
{

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_ROLLUPSTATUS_COMPLETED,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_ROLLUPSTATUS_NEED_MORE_INFORMATION,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_ROLLUPSTATUS_RESERVED,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_ROLLUPSTATUS_READY
};

/**
 * Reads a RollupStatus from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The RollupStatus, or NULL if unable to be read.
 */
static enum FSRESERVATIONV1RollupStatus *xmlTextReaderReadFSRESERVATIONV1RollupStatusType(xmlTextReaderPtr reader);

/**
 * Writes a RollupStatus to XML.
 *
 * @param writer The XML writer.
 * @param _rollupStatus The RollupStatus to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSRESERVATIONV1RollupStatusType(xmlTextWriterPtr writer, enum FSRESERVATIONV1RollupStatus *_rollupStatus);

/**
 *  A scope of an assertion.

 @author Ryan Heaton

 */
enum FSRESERVATIONV1Scope
{

  /**
   *  The assertion applies to a person.

   */
  RESERVATION_RESERVATION_V1_SCOPE_PERSON,

  /**
   *  The assertion applies to a couple.

   */
  RESERVATION_RESERVATION_V1_SCOPE_COUPLE,

  /**
   *  The assertion applies to a parent-child relationship.

   */
  RESERVATION_RESERVATION_V1_SCOPE_PARENTCHILD
};

/**
 * Reads a Scope from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The Scope, or NULL if unable to be read.
 */
static enum FSRESERVATIONV1Scope *xmlTextReaderReadFSRESERVATIONV1ScopeType(xmlTextReaderPtr reader);

/**
 * Writes a Scope to XML.
 *
 * @param writer The XML writer.
 * @param _scope The Scope to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSRESERVATIONV1ScopeType(xmlTextWriterPtr writer, enum FSRESERVATIONV1Scope *_scope);

/**
 *  Parent Role

 @author Rob Lyon

 */
enum FSRESERVATIONV1ParentRole
{

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_PARENTROLE_FATHER,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_PARENTROLE_MOTHER,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_PARENTROLE_UNKNOWN
};

/**
 * Reads a ParentRole from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The ParentRole, or NULL if unable to be read.
 */
static enum FSRESERVATIONV1ParentRole *xmlTextReaderReadFSRESERVATIONV1ParentRoleType(xmlTextReaderPtr reader);

/**
 * Writes a ParentRole to XML.
 *
 * @param writer The XML writer.
 * @param _parentRole The ParentRole to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSRESERVATIONV1ParentRoleType(xmlTextWriterPtr writer, enum FSRESERVATIONV1ParentRole *_parentRole);

/**
 *  Enumeration of name piece types.

 @author Ryan Heaton

 */
enum FSRESERVATIONV1NamePieceType
{

  /**
   *  Prefix piece.

   */
  RESERVATION_RESERVATION_V1_NAMEPIECETYPE_PREFIX,

  /**
   *  Suffix piece.

   */
  RESERVATION_RESERVATION_V1_NAMEPIECETYPE_SUFFIX,

  /**
   *  Given piece.

   */
  RESERVATION_RESERVATION_V1_NAMEPIECETYPE_GIVEN,

  /**
   *  Family piece.

   */
  RESERVATION_RESERVATION_V1_NAMEPIECETYPE_FAMILY,

  /**
   *  Other piece.

   */
  RESERVATION_RESERVATION_V1_NAMEPIECETYPE_OTHER
};

/**
 * Reads a NamePieceType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The NamePieceType, or NULL if unable to be read.
 */
static enum FSRESERVATIONV1NamePieceType *xmlTextReaderReadFSRESERVATIONV1NamePieceTypeType(xmlTextReaderPtr reader);

/**
 * Writes a NamePieceType to XML.
 *
 * @param writer The XML writer.
 * @param _namePieceType The NamePieceType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSRESERVATIONV1NamePieceTypeType(xmlTextWriterPtr writer, enum FSRESERVATIONV1NamePieceType *_namePieceType);

/**
 *  The allowable inventory types.

 */
enum FSRESERVATIONV1InventoryType
{

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_INVENTORYTYPE_PERSONAL,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_INVENTORYTYPE_CHURCH
};

/**
 * Reads a InventoryType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The InventoryType, or NULL if unable to be read.
 */
static enum FSRESERVATIONV1InventoryType *xmlTextReaderReadFSRESERVATIONV1InventoryTypeType(xmlTextReaderPtr reader);

/**
 * Writes a InventoryType to XML.
 *
 * @param writer The XML writer.
 * @param _inventoryType The InventoryType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSRESERVATIONV1InventoryTypeType(xmlTextWriterPtr writer, enum FSRESERVATIONV1InventoryType *_inventoryType);

/**
 *  The gender types.

 @author Ryan Heaton

 */
enum FSRESERVATIONV1GenderType
{

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_GENDERTYPE_MALE,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_GENDERTYPE_FEMALE,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_GENDERTYPE_UNKNOWN,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_GENDERTYPE_UNSPECIFIED
};

/**
 * Reads a GenderType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The GenderType, or NULL if unable to be read.
 */
static enum FSRESERVATIONV1GenderType *xmlTextReaderReadFSRESERVATIONV1GenderTypeType(xmlTextReaderPtr reader);

/**
 * Writes a GenderType to XML.
 *
 * @param writer The XML writer.
 * @param _genderType The GenderType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSRESERVATIONV1GenderTypeType(xmlTextWriterPtr writer, enum FSRESERVATIONV1GenderType *_genderType);

/**
 *  Card Type

 @author Duane Kuehne

 */
enum FSRESERVATIONV1CardType
{

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_CARDTYPE_MALE,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_CARDTYPE_FEMALE,

  /**
   * (no documentation provided)
   */
  RESERVATION_RESERVATION_V1_CARDTYPE_COUPLE
};

/**
 * Reads a CardType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The CardType, or NULL if unable to be read.
 */
static enum FSRESERVATIONV1CardType *xmlTextReaderReadFSRESERVATIONV1CardTypeType(xmlTextReaderPtr reader);

/**
 * Writes a CardType to XML.
 *
 * @param writer The XML writer.
 * @param _cardType The CardType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSRESERVATIONV1CardTypeType(xmlTextWriterPtr writer, enum FSRESERVATIONV1CardType *_cardType);

@class FSRESERVATIONV1Cards;
@class FSRESERVATIONV1DateData;
@class FSRESERVATIONV1DateAstro;
@class FSRESERVATIONV1ContributorReference;
@class FSRESERVATIONV1ErrorReference;
@class FSRESERVATIONV1Event;
@class FSRESERVATIONV1Family;
@class FSRESERVATIONV1Inventory;
@class FSRESERVATIONV1MinimumQualification;
@class FSRESERVATIONV1NameForm;
@class FSRESERVATIONV1NamePiece;
@class FSRESERVATIONV1Ordinance;
@class FSRESERVATIONV1OrdinanceReference;
@class FSRESERVATIONV1Person;
@class FSRESERVATIONV1Persona;
@class FSRESERVATIONV1Place;
@class FSRESERVATIONV1Reservation;
@class FSRESERVATIONV1Persons;
@class FSRESERVATIONV1PersonReference;
@class FSRESERVATIONV1Trip;
@class FSRESERVATIONV1TripSummary;
@class FSRESERVATIONV1UserNotification;
@class FSRESERVATIONV1Trips;
@class FSRESERVATIONV1UserNotifications;
@class FSRESERVATIONV1TripCardSummary;
@class FSRESERVATIONV1Temple;
@class FSRESERVATIONV1NormalizedPlace;
@class FSRESERVATIONV1Families;
@class FSRESERVATIONV1Card;
@class FSV1BasicProperty;
@class FSRESERVATIONV1Qualification;
@class FSV1BasicError;
@class FSV1BasicElement;
@class FSRESERVATIONV1ReservationRootElement;
@class FSRESERVATIONV1ReservationError;


/**
 *  A collection of cards from the temple.

 @author Duane Kuehne

 */
@interface FSRESERVATIONV1Cards : NSObject
{
  @private
    NSArray *_cardItems;
}

/**
 * The cards.
 */
- (NSArray *) cardItems;

/**
 * The cards.
 */
- (void) setCardItems: (NSArray *) newCardItems;
@end /* interface FSRESERVATIONV1Cards */

/**
 *  A date.

 @author Ryan Heaton

 */
@interface FSRESERVATIONV1DateData : NSObject
{
  @private
    NSString *_original;
    NSString *_normalized;
    FSRESERVATIONV1DateAstro *_astro;
}

/**
 * The date value.
 */
- (NSString *) original;

/**
 * The date value.
 */
- (void) setOriginal: (NSString *) newOriginal;

/**
 * The normalized value.
 */
- (NSString *) normalized;

/**
 * The normalized value.
 */
- (void) setNormalized: (NSString *) newNormalized;

/**
 * The astro date.
 */
- (FSRESERVATIONV1DateAstro *) astro;

/**
 * The astro date.
 */
- (void) setAstro: (FSRESERVATIONV1DateAstro *) newAstro;
@end /* interface FSRESERVATIONV1DateData */

/**
 *  An astro date.

 @author Rob Lyon

 */
@interface FSRESERVATIONV1DateAstro : NSObject
{
  @private
    NSString *_earliest;
    NSString *_latest;
}

/**
 * The earliest astro date.
 */
- (NSString *) earliest;

/**
 * The earliest astro date.
 */
- (void) setEarliest: (NSString *) newEarliest;

/**
 * The lastest astro date.
 */
- (NSString *) latest;

/**
 * The lastest astro date.
 */
- (void) setLatest: (NSString *) newLatest;
@end /* interface FSRESERVATIONV1DateAstro */

/**
 *  a Reference to a Contributor.  This is currently used for the owner of a {@link Reservation}.

 @author PabstEC

 */
@interface FSRESERVATIONV1ContributorReference : NSObject
{
  @private
    NSString *_ref;
}

/**
 * the reference
 */
- (NSString *) ref;

/**
 * the reference
 */
- (void) setRef: (NSString *) newRef;
@end /* interface FSRESERVATIONV1ContributorReference */

/**
 *  A reference to an element from an error.

 @author Ryan Heaton

 */
@interface FSRESERVATIONV1ErrorReference : NSObject
{
  @private
    NSString *_ref;
    NSString *_tempId;
}

/**
 * The reference to the id of the element.
 */
- (NSString *) ref;

/**
 * The reference to the id of the element.
 */
- (void) setRef: (NSString *) newRef;

/**
 * The temporary id that was supplied in the request.
 */
- (NSString *) tempId;

/**
 * The temporary id that was supplied in the request.
 */
- (void) setTempId: (NSString *) newTempId;
@end /* interface FSRESERVATIONV1ErrorReference */

/**
 *  An event.

 @author Rob Lyon

 */
@interface FSRESERVATIONV1Event : NSObject
{
  @private
    enum FSRESERVATIONV1Scope *_scope;
    enum FSRESERVATIONV1EventType *_type;
    FSRESERVATIONV1DateData *_date;
    FSRESERVATIONV1Place *_place;
}

/**
 * the scope of the event.
 */
- (enum FSRESERVATIONV1Scope *) scope;

/**
 * the scope of the event.
 */
- (void) setScope: (enum FSRESERVATIONV1Scope *) newScope;

/**
 * The type of the event.
 */
- (enum FSRESERVATIONV1EventType *) type;

/**
 * The type of the event.
 */
- (void) setType: (enum FSRESERVATIONV1EventType *) newType;

/**
 * The date the assertion occurred.
 */
- (FSRESERVATIONV1DateData *) date;

/**
 * The date the assertion occurred.
 */
- (void) setDate: (FSRESERVATIONV1DateData *) newDate;

/**
 * The place the assertion occurred.
 */
- (FSRESERVATIONV1Place *) place;

/**
 * The place the assertion occurred.
 */
- (void) setPlace: (FSRESERVATIONV1Place *) newPlace;
@end /* interface FSRESERVATIONV1Event */

/**
 *  Holds all ordinance status information for a parent group and the children that are part of that parent group.

 @author Sreenivas Boralingiah

 */
@interface FSRESERVATIONV1Family : NSObject
{
  @private
    enum FSRESERVATIONV1RollupStatus *_status;
    BOOL *_readyForTrip;
    NSString *_version;
    NSArray *_parents;
    NSArray *_children;
}

/**
 * (no documentation provided)
 */
- (enum FSRESERVATIONV1RollupStatus *) status;

/**
 * (no documentation provided)
 */
- (void) setStatus: (enum FSRESERVATIONV1RollupStatus *) newStatus;

/**
 * (no documentation provided)
 */
- (BOOL *) readyForTrip;

/**
 * (no documentation provided)
 */
- (void) setReadyForTrip: (BOOL *) newReadyForTrip;

/**
 * the version
 */
- (NSString *) version;

/**
 * the version
 */
- (void) setVersion: (NSString *) newVersion;

/**
 * (no documentation provided)
 */
- (NSArray *) parents;

/**
 * (no documentation provided)
 */
- (void) setParents: (NSArray *) newParents;

/**
 * (no documentation provided)
 */
- (NSArray *) children;

/**
 * (no documentation provided)
 */
- (void) setChildren: (NSArray *) newChildren;
@end /* interface FSRESERVATIONV1Family */

/**
 *  Created by IntelliJ IDEA. User: boralingiahsr Date: Jan 10, 2008 Time: 11:38:44 AM To change this template use File | Settings | File Templates.

 */
@interface FSRESERVATIONV1Inventory : NSObject
{
  @private
    enum FSRESERVATIONV1InventoryType *_type;
}

/**
 * (no documentation provided)
 */
- (enum FSRESERVATIONV1InventoryType *) type;

/**
 * (no documentation provided)
 */
- (void) setType: (enum FSRESERVATIONV1InventoryType *) newType;
@end /* interface FSRESERVATIONV1Inventory */

/**
 *  minimum qualification data for a person involved in an ordinance.

 @author PabstEC

 */
@interface FSRESERVATIONV1MinimumQualification : NSObject
{
  @private
    FSRESERVATIONV1NameForm *_name;
}

/**
 * The person's qualifying name.
 */
- (FSRESERVATIONV1NameForm *) name;

/**
 * The person's qualifying name.
 */
- (void) setName: (FSRESERVATIONV1NameForm *) newName;
@end /* interface FSRESERVATIONV1MinimumQualification */

/**
 *  A name form.
 
 @author Ryan Heaton

 */
@interface FSRESERVATIONV1NameForm : NSObject
{
  @private
    enum FSRESERVATIONV1NameFormScript *_script;
    NSString *_fullText;
    NSArray *_pieces;
}

/**
 * The name form script.
 */
- (enum FSRESERVATIONV1NameFormScript *) script;

/**
 * The name form script.
 */
- (void) setScript: (enum FSRESERVATIONV1NameFormScript *) newScript;

/**
 * The normalized full text of the name.
 */
- (NSString *) fullText;

/**
 * The normalized full text of the name.
 */
- (void) setFullText: (NSString *) newFullText;

/**
 * The name pieces.
 */
- (NSArray *) pieces;

/**
 * The name pieces.
 */
- (void) setPieces: (NSArray *) newPieces;
@end /* interface FSRESERVATIONV1NameForm */

/**
 *  A piece of a name.

 @author Ryan Heaton

 */
@interface FSRESERVATIONV1NamePiece : NSObject
{
  @private
    enum FSRESERVATIONV1NamePieceType *_type;
    NSString *_predelimiters;
    NSString *_value;
    NSString *_postdelimiters;
}

/**
 * The type of the name piece.
 */
- (enum FSRESERVATIONV1NamePieceType *) type;

/**
 * The type of the name piece.
 */
- (void) setType: (enum FSRESERVATIONV1NamePieceType *) newType;

/**
 * The predelimiters.
 */
- (NSString *) predelimiters;

/**
 * The predelimiters.
 */
- (void) setPredelimiters: (NSString *) newPredelimiters;

/**
 * The value of the name piece.
 */
- (NSString *) value;

/**
 * The value of the name piece.
 */
- (void) setValue: (NSString *) newValue;

/**
 * The postdelimiters.
 */
- (NSString *) postdelimiters;

/**
 * The postdelimiters.
 */
- (void) setPostdelimiters: (NSString *) newPostdelimiters;
@end /* interface FSRESERVATIONV1NamePiece */

/**
 *  An ordinance.

 @author Rob Lyon

 */
@interface FSRESERVATIONV1Ordinance : NSObject
{
  @private
    enum FSRESERVATIONV1OrdinanceStatus *_status;
    BOOL *_reservable;
    BOOL *_readyForTrip;
    BOOL *_completed;
    NSArray *_prerequisitesForTrip;
    FSRESERVATIONV1Reservation *_reservation;
    BOOL *_bornInCovenant;
    FSRESERVATIONV1DateData *_date;
    FSRESERVATIONV1Place *_place;
    FSRESERVATIONV1Temple *_temple;
    FSRESERVATIONV1PersonReference *_spouse;
    NSArray *_parents;
}

/**
 * (no documentation provided)
 */
- (enum FSRESERVATIONV1OrdinanceStatus *) status;

/**
 * (no documentation provided)
 */
- (void) setStatus: (enum FSRESERVATIONV1OrdinanceStatus *) newStatus;

/**
 * (no documentation provided)
 */
- (BOOL *) reservable;

/**
 * (no documentation provided)
 */
- (void) setReservable: (BOOL *) newReservable;

/**
 * (no documentation provided)
 */
- (BOOL *) readyForTrip;

/**
 * (no documentation provided)
 */
- (void) setReadyForTrip: (BOOL *) newReadyForTrip;

/**
 * (no documentation provided)
 */
- (BOOL *) completed;

/**
 * (no documentation provided)
 */
- (void) setCompleted: (BOOL *) newCompleted;

/**
 * Person(s) including the prerequisite Ordinance or null if readyForTrip is false
 */
- (NSArray *) prerequisitesForTrip;

/**
 * Person(s) including the prerequisite Ordinance or null if readyForTrip is false
 */
- (void) setPrerequisitesForTrip: (NSArray *) newPrerequisitesForTrip;

/**
 * (no documentation provided)
 */
- (FSRESERVATIONV1Reservation *) reservation;

/**
 * (no documentation provided)
 */
- (void) setReservation: (FSRESERVATIONV1Reservation *) newReservation;

/**
 * The BIC flag for a sealing to parents ordinance.
 */
- (BOOL *) bornInCovenant;

/**
 * The BIC flag for a sealing to parents ordinance.
 */
- (void) setBornInCovenant: (BOOL *) newBornInCovenant;

/**
 * (no documentation provided)
 */
- (FSRESERVATIONV1DateData *) date;

/**
 * (no documentation provided)
 */
- (void) setDate: (FSRESERVATIONV1DateData *) newDate;

/**
 * (no documentation provided)
 */
- (FSRESERVATIONV1Place *) place;

/**
 * (no documentation provided)
 */
- (void) setPlace: (FSRESERVATIONV1Place *) newPlace;

/**
 * (no documentation provided)
 */
- (FSRESERVATIONV1Temple *) temple;

/**
 * (no documentation provided)
 */
- (void) setTemple: (FSRESERVATIONV1Temple *) newTemple;

/**
 * (no documentation provided)
 */
- (FSRESERVATIONV1PersonReference *) spouse;

/**
 * (no documentation provided)
 */
- (void) setSpouse: (FSRESERVATIONV1PersonReference *) newSpouse;

/**
 * (no documentation provided)
 */
- (NSArray *) parents;

/**
 * (no documentation provided)
 */
- (void) setParents: (NSArray *) newParents;
@end /* interface FSRESERVATIONV1Ordinance */

/**
 *  Reference to a specific ordinance.
 
 @author Ryan Heaton

 */
@interface FSRESERVATIONV1OrdinanceReference : NSObject
{
  @private
    FSRESERVATIONV1PersonReference *_spouse;
    NSArray *_parents;
}

/**
 * (no documentation provided)
 */
- (FSRESERVATIONV1PersonReference *) spouse;

/**
 * (no documentation provided)
 */
- (void) setSpouse: (FSRESERVATIONV1PersonReference *) newSpouse;

/**
 * (no documentation provided)
 */
- (NSArray *) parents;

/**
 * (no documentation provided)
 */
- (void) setParents: (NSArray *) newParents;
@end /* interface FSRESERVATIONV1OrdinanceReference */

/**
 *  A reservation person.

 @author Rob Lyon

 */
@interface FSRESERVATIONV1Person : NSObject
{
  @private
    enum FSRESERVATIONV1RollupStatus *_status;
    BOOL *_readyForTrip;
    NSString *_version;
    NSString *_ref;
    NSString *_action;
    enum FSRESERVATIONV1ParentRole *_role;
    NSString *_requestedRef;
    NSString *_tempId;
    FSRESERVATIONV1Qualification *_qualification;
    BOOL *_bornInCovenant;
    FSRESERVATIONV1Ordinance *_baptism;
    FSRESERVATIONV1Ordinance *_confirmation;
    FSRESERVATIONV1Ordinance *_initiatory;
    FSRESERVATIONV1Ordinance *_endowment;
    NSArray *_sealingToParentsOrdinances;
    NSArray *_sealingToSpouseOrdinances;
    FSRESERVATIONV1UserNotifications *_userNotifications;
}

/**
 * The person status.
 */
- (enum FSRESERVATIONV1RollupStatus *) status;

/**
 * The person status.
 */
- (void) setStatus: (enum FSRESERVATIONV1RollupStatus *) newStatus;

/**
 * The person is ready to be added to a temple trip
 */
- (BOOL *) readyForTrip;

/**
 * The person is ready to be added to a temple trip
 */
- (void) setReadyForTrip: (BOOL *) newReadyForTrip;

/**
 * the version
 */
- (NSString *) version;

/**
 * the version
 */
- (void) setVersion: (NSString *) newVersion;

/**
 * The person id.
 */
- (NSString *) ref;

/**
 * The person id.
 */
- (void) setRef: (NSString *) newRef;

/**
 * the action to perform on this person
 */
- (NSString *) action;

/**
 * the action to perform on this person
 */
- (void) setAction: (NSString *) newAction;

/**
 * The role as a parent (if applicable).
 */
- (enum FSRESERVATIONV1ParentRole *) role;

/**
 * The role as a parent (if applicable).
 */
- (void) setRole: (enum FSRESERVATIONV1ParentRole *) newRole;

/**
 * The requested id.
 */
- (NSString *) requestedRef;

/**
 * The requested id.
 */
- (void) setRequestedRef: (NSString *) newRequestedRef;

/**
 * The temp id.
 */
- (NSString *) tempId;

/**
 * The temp id.
 */
- (void) setTempId: (NSString *) newTempId;

/**
 * The ordinance qualification data for the person.
 */
- (FSRESERVATIONV1Qualification *) qualification;

/**
 * The ordinance qualification data for the person.
 */
- (void) setQualification: (FSRESERVATIONV1Qualification *) newQualification;

/**
 * The person BIC flag.
 */
- (BOOL *) bornInCovenant;

/**
 * The person BIC flag.
 */
- (void) setBornInCovenant: (BOOL *) newBornInCovenant;

/**
 * The baptism ordinance.
 */
- (FSRESERVATIONV1Ordinance *) baptism;

/**
 * The baptism ordinance.
 */
- (void) setBaptism: (FSRESERVATIONV1Ordinance *) newBaptism;

/**
 * The confirmation ordinance.
 */
- (FSRESERVATIONV1Ordinance *) confirmation;

/**
 * The confirmation ordinance.
 */
- (void) setConfirmation: (FSRESERVATIONV1Ordinance *) newConfirmation;

/**
 * The initiatory ordinance.
 */
- (FSRESERVATIONV1Ordinance *) initiatory;

/**
 * The initiatory ordinance.
 */
- (void) setInitiatory: (FSRESERVATIONV1Ordinance *) newInitiatory;

/**
 * The endowment ordinance.
 */
- (FSRESERVATIONV1Ordinance *) endowment;

/**
 * The endowment ordinance.
 */
- (void) setEndowment: (FSRESERVATIONV1Ordinance *) newEndowment;

/**
 * The sealing to parents ordinances.
 */
- (NSArray *) sealingToParentsOrdinances;

/**
 * The sealing to parents ordinances.
 */
- (void) setSealingToParentsOrdinances: (NSArray *) newSealingToParentsOrdinances;

/**
 * The sealing to spouse ordinances.
 */
- (NSArray *) sealingToSpouseOrdinances;

/**
 * The sealing to spouse ordinances.
 */
- (void) setSealingToSpouseOrdinances: (NSArray *) newSealingToSpouseOrdinances;

/**
 * The sealing to spouse ordinances.
 */
- (FSRESERVATIONV1UserNotifications *) userNotifications;

/**
 * The sealing to spouse ordinances.
 */
- (void) setUserNotifications: (FSRESERVATIONV1UserNotifications *) newUserNotifications;
@end /* interface FSRESERVATIONV1Person */

/**
 *  A reservation persona

 @author Tim Adair (timadair@ldschurch.org) Date: Mar 9, 2009 Time: 11:25:43 AM

 */
@interface FSRESERVATIONV1Persona : NSObject
{
  @private
    NSString *_id;
}

/**
 * The id of the persona.
 */
- (NSString *) id;

/**
 * The id of the persona.
 */
- (void) setId: (NSString *) newId;
@end /* interface FSRESERVATIONV1Persona */

/**
 *  A place.

 @author Ryan Heaton

 */
@interface FSRESERVATIONV1Place : NSObject
{
  @private
    NSString *_original;
    FSRESERVATIONV1NormalizedPlace *_normalized;
}

/**
 * The place value.
 */
- (NSString *) original;

/**
 * The place value.
 */
- (void) setOriginal: (NSString *) newOriginal;

/**
 * The normalized form of the place.
 */
- (FSRESERVATIONV1NormalizedPlace *) normalized;

/**
 * The normalized form of the place.
 */
- (void) setNormalized: (FSRESERVATIONV1NormalizedPlace *) newNormalized;
@end /* interface FSRESERVATIONV1Place */

/**
 *  An ordinance reservation.

 @author Rob Lyon

 */
@interface FSRESERVATIONV1Reservation : NSObject
{
  @private
    NSString *_modifiedDate;
    NSDate *_modified;
    FSRESERVATIONV1ContributorReference *_owner;
    FSRESERVATIONV1Inventory *_inventory;
    NSArray *_assignableInventories;
}

/**
 * (no documentation provided)
 */
- (NSString *) modifiedDate;

/**
 * (no documentation provided)
 */
- (void) setModifiedDate: (NSString *) newModifiedDate;

/**
 * (no documentation provided)
 */
- (NSDate *) modified;

/**
 * (no documentation provided)
 */
- (void) setModified: (NSDate *) newModified;

/**
 * (no documentation provided)
 */
- (FSRESERVATIONV1ContributorReference *) owner;

/**
 * (no documentation provided)
 */
- (void) setOwner: (FSRESERVATIONV1ContributorReference *) newOwner;

/**
 * (no documentation provided)
 */
- (FSRESERVATIONV1Inventory *) inventory;

/**
 * (no documentation provided)
 */
- (void) setInventory: (FSRESERVATIONV1Inventory *) newInventory;

/**
 * (no documentation provided)
 */
- (NSArray *) assignableInventories;

/**
 * (no documentation provided)
 */
- (void) setAssignableInventories: (NSArray *) newAssignableInventories;
@end /* interface FSRESERVATIONV1Reservation */

/**
 *  A list of reservation persons.

 @author Rob Lyon

 */
@interface FSRESERVATIONV1Persons : NSObject
{
  @private
    int _count;
    NSString *_start;
    NSString *_end;
    NSArray *_personItems;
}

/**
 * the number of persons.
 */
- (int) count;

/**
 * the number of persons.
 */
- (void) setCount: (int) newCount;

/**
 * Value for property 'start'.
 */
- (NSString *) start;

/**
 * Value for property 'start'.
 */
- (void) setStart: (NSString *) newStart;

/**
 * Value for property 'end'.
 */
- (NSString *) end;

/**
 * Value for property 'end'.
 */
- (void) setEnd: (NSString *) newEnd;

/**
 * a list of persons.
 */
- (NSArray *) personItems;

/**
 * a list of persons.
 */
- (void) setPersonItems: (NSArray *) newPersonItems;
@end /* interface FSRESERVATIONV1Persons */

/**
 *  @author Ryan Heaton

 */
@interface FSRESERVATIONV1PersonReference : NSObject
{
  @private
    NSString *_ref;
    enum FSRESERVATIONV1ParentRole *_role;
    FSRESERVATIONV1Qualification *_qualification;
}

/**
 * (no documentation provided)
 */
- (NSString *) ref;

/**
 * (no documentation provided)
 */
- (void) setRef: (NSString *) newRef;

/**
 * (no documentation provided)
 */
- (enum FSRESERVATIONV1ParentRole *) role;

/**
 * (no documentation provided)
 */
- (void) setRole: (enum FSRESERVATIONV1ParentRole *) newRole;

/**
 * (no documentation provided)
 */
- (FSRESERVATIONV1Qualification *) qualification;

/**
 * (no documentation provided)
 */
- (void) setQualification: (FSRESERVATIONV1Qualification *) newQualification;
@end /* interface FSRESERVATIONV1PersonReference */

/**
 *  A trip to the temple.

 @author Ryan Heaton

 */
@interface FSRESERVATIONV1Trip : NSObject
{
  @private
    NSString *_id;
    NSDate *_created;
    NSString *_tempId;
    FSRESERVATIONV1TripSummary *_summary;
    FSRESERVATIONV1Persons *_persons;
    NSArray *_cards;
    FSRESERVATIONV1UserNotifications *_userNotifications;
}

/**
 * The id of the trip.
 */
- (NSString *) id;

/**
 * The id of the trip.
 */
- (void) setId: (NSString *) newId;

/**
 * The date the trip was created.
 */
- (NSDate *) created;

/**
 * The date the trip was created.
 */
- (void) setCreated: (NSDate *) newCreated;

/**
 * Temp id to be echoed back in the response.
 */
- (NSString *) tempId;

/**
 * Temp id to be echoed back in the response.
 */
- (void) setTempId: (NSString *) newTempId;

/**
 * The summary.
 */
- (FSRESERVATIONV1TripSummary *) summary;

/**
 * The summary.
 */
- (void) setSummary: (FSRESERVATIONV1TripSummary *) newSummary;

/**
 * The persons included in the trip.
 */
- (FSRESERVATIONV1Persons *) persons;

/**
 * The persons included in the trip.
 */
- (void) setPersons: (FSRESERVATIONV1Persons *) newPersons;

/**
 * The cards in the trip.
 */
- (NSArray *) cards;

/**
 * The cards in the trip.
 */
- (void) setCards: (NSArray *) newCards;

/**
 * (no documentation provided)
 */
- (FSRESERVATIONV1UserNotifications *) userNotifications;

/**
 * (no documentation provided)
 */
- (void) setUserNotifications: (FSRESERVATIONV1UserNotifications *) newUserNotifications;
@end /* interface FSRESERVATIONV1Trip */

/**
 *  Summary of a trip.

 @author Ryan Heaton

 */
@interface FSRESERVATIONV1TripSummary : NSObject
{
  @private
    FSRESERVATIONV1TripCardSummary *_males;
    FSRESERVATIONV1TripCardSummary *_females;
    FSRESERVATIONV1TripCardSummary *_couples;
}

/**
 * Card summary for males.
 */
- (FSRESERVATIONV1TripCardSummary *) males;

/**
 * Card summary for males.
 */
- (void) setMales: (FSRESERVATIONV1TripCardSummary *) newMales;

/**
 * Card summary for females.
 */
- (FSRESERVATIONV1TripCardSummary *) females;

/**
 * Card summary for females.
 */
- (void) setFemales: (FSRESERVATIONV1TripCardSummary *) newFemales;

/**
 * Card summary for couples.
 */
- (FSRESERVATIONV1TripCardSummary *) couples;

/**
 * Card summary for couples.
 */
- (void) setCouples: (FSRESERVATIONV1TripCardSummary *) newCouples;
@end /* interface FSRESERVATIONV1TripSummary */

/**
 *  A way to represent a notification that the 3rd party client should communicate to their users.

 @author Tim Adair (timadair@ldschurch.org) Date: Mar 2, 2009 Time: 9:18:59 AM

 */
@interface FSRESERVATIONV1UserNotification : NSObject
{
  @private
    enum FSRESERVATIONV1NotificationLevel *_level;
    enum FSRESERVATIONV1NotificationCode *_code;
    NSString *_message;
    NSArray *_personas;
}

/**
 * Gets the level of importance, [required|optional]. "required" notifications must be shown to the user for certification. "optional" notifications may be
displayed at the developer's discretion.
 */
- (enum FSRESERVATIONV1NotificationLevel *) level;

/**
 * Gets the level of importance, [required|optional]. "required" notifications must be shown to the user for certification. "optional" notifications may be
displayed at the developer's discretion.
 */
- (void) setLevel: (enum FSRESERVATIONV1NotificationLevel *) newLevel;

/**
 * the code
 */
- (enum FSRESERVATIONV1NotificationCode *) code;

/**
 * the code
 */
- (void) setCode: (enum FSRESERVATIONV1NotificationCode *) newCode;

/**
 * the String message
 */
- (NSString *) message;

/**
 * the String message
 */
- (void) setMessage: (NSString *) newMessage;

/**
 * a list of persons.
 */
- (NSArray *) personas;

/**
 * a list of persons.
 */
- (void) setPersonas: (NSArray *) newPersonas;
@end /* interface FSRESERVATIONV1UserNotification */

/**
 *  A trip to the temple.

 @author Ryan Heaton

 */
@interface FSRESERVATIONV1Trips : NSObject
{
  @private
    NSArray *_tripItems;
}

/**
 * The trips.
 */
- (NSArray *) tripItems;

/**
 * The trips.
 */
- (void) setTripItems: (NSArray *) newTripItems;
@end /* interface FSRESERVATIONV1Trips */

/**
 *  A collection of user notifications

 @author Tim Adair (timadair@ldschurch.org) Date: Mar 2, 2009 Time: 9:19:19 AM

 */
@interface FSRESERVATIONV1UserNotifications : NSObject
{
  @private
    NSArray *_userNotificationItems;
}

/**
 * The user notifications.
 */
- (NSArray *) userNotificationItems;

/**
 * The user notifications.
 */
- (void) setUserNotificationItems: (NSArray *) newUserNotificationItems;
@end /* interface FSRESERVATIONV1UserNotifications */

/**
 *  @author Ryan Heaton

 */
@interface FSRESERVATIONV1TripCardSummary : NSObject
{
  @private
    int _count;
}

/**
 * The count.
 */
- (int) count;

/**
 * The count.
 */
- (void) setCount: (int) newCount;
@end /* interface FSRESERVATIONV1TripCardSummary */

/**
 *  A reference to a temple.

 @author Eric Pabst

 */
@interface FSRESERVATIONV1Temple : NSObject
{
  @private
    NSString *_code;
}

/**
 * the code of the temple.
 */
- (NSString *) code;

/**
 * the code of the temple.
 */
- (void) setCode: (NSString *) newCode;
@end /* interface FSRESERVATIONV1Temple */

/**
 *  Text for a normalized place.

 @author Ryan Heaton

 */
@interface FSRESERVATIONV1NormalizedPlace : NSObject
{
  @private
    NSString *_placeId;
    NSString *_value;
}

/**
 * The place authority id.
 */
- (NSString *) placeId;

/**
 * The place authority id.
 */
- (void) setPlaceId: (NSString *) newPlaceId;

/**
 * The value.
 */
- (NSString *) value;

/**
 * The value.
 */
- (void) setValue: (NSString *) newValue;
@end /* interface FSRESERVATIONV1NormalizedPlace */

/**
 *  Families class that holds a list of Family.

 @author: Sreenivas Boralingiah User: boralingiahsr

 */
@interface FSRESERVATIONV1Families : NSObject
{
  @private
    int _count;
    NSArray *_familyItems;
}

/**
 * the number of persons.
 */
- (int) count;

/**
 * the number of persons.
 */
- (void) setCount: (int) newCount;

/**
 * a list of persons.
 */
- (NSArray *) familyItems;

/**
 * a list of persons.
 */
- (void) setFamilyItems: (NSArray *) newFamilyItems;
@end /* interface FSRESERVATIONV1Families */

/**
 *  A temple card.

 @author Ryan Heaton

 */
@interface FSRESERVATIONV1Card : NSObject
{
  @private
    NSString *_id;
    enum FSRESERVATIONV1CardType *_type;
    NSString *_tempId;
    FSRESERVATIONV1Person *_person;
}

/**
 * The card id.
 */
- (NSString *) id;

/**
 * The card id.
 */
- (void) setId: (NSString *) newId;

/**
 * The card type
 */
- (enum FSRESERVATIONV1CardType *) type;

/**
 * The card type
 */
- (void) setType: (enum FSRESERVATIONV1CardType *) newType;

/**
 * The temp id.
 */
- (NSString *) tempId;

/**
 * The temp id.
 */
- (void) setTempId: (NSString *) newTempId;

/**
 * The card details.
 */
- (FSRESERVATIONV1Person *) person;

/**
 * The card details.
 */
- (void) setPerson: (FSRESERVATIONV1Person *) newPerson;
@end /* interface FSRESERVATIONV1Card */

/**
 *  qualification data for an ordinance.

 @author PabstEC

 */
@interface FSRESERVATIONV1Qualification : FSRESERVATIONV1MinimumQualification
{
  @private
    enum FSRESERVATIONV1GenderType *_gender;
    NSArray *_events;
}

/**
 * The person gender.
 */
- (enum FSRESERVATIONV1GenderType *) gender;

/**
 * The person gender.
 */
- (void) setGender: (enum FSRESERVATIONV1GenderType *) newGender;

/**
 * The person events.
 */
- (NSArray *) events;

/**
 * The person events.
 */
- (void) setEvents: (NSArray *) newEvents;
@end /* interface FSRESERVATIONV1Qualification */

/**
 *  @author Rob Lyon

 */
@interface FSRESERVATIONV1ReservationRootElement : FSV1BasicElement <EnunciateXML>
{
  @private
    FSRESERVATIONV1Persons *_persons;
    FSRESERVATIONV1Families *_families;
    FSRESERVATIONV1Trips *_trips;
    FSRESERVATIONV1Cards *_cards;
}

/**
 * The persons.
 */
- (FSRESERVATIONV1Persons *) persons;

/**
 * The persons.
 */
- (void) setPersons: (FSRESERVATIONV1Persons *) newPersons;

/**
 * The families.
 */
- (FSRESERVATIONV1Families *) families;

/**
 * The families.
 */
- (void) setFamilies: (FSRESERVATIONV1Families *) newFamilies;

/**
 * The trips.
 */
- (FSRESERVATIONV1Trips *) trips;

/**
 * The trips.
 */
- (void) setTrips: (FSRESERVATIONV1Trips *) newTrips;

/**
 * The cards.
 */
- (FSRESERVATIONV1Cards *) cards;

/**
 * The cards.
 */
- (void) setCards: (FSRESERVATIONV1Cards *) newCards;
@end /* interface FSRESERVATIONV1ReservationRootElement */

/**
 *  @author Ryan Heaton

 */
@interface FSRESERVATIONV1ReservationError : FSV1BasicError
{
  @private
    FSRESERVATIONV1ErrorReference *_trip;
    FSRESERVATIONV1ErrorReference *_person;
    FSRESERVATIONV1ErrorReference *_card;
    FSRESERVATIONV1OrdinanceReference *_baptism;
    FSRESERVATIONV1OrdinanceReference *_confirmation;
    FSRESERVATIONV1OrdinanceReference *_initiatory;
    FSRESERVATIONV1OrdinanceReference *_endowment;
    FSRESERVATIONV1OrdinanceReference *_sealingToSpouse;
    FSRESERVATIONV1OrdinanceReference *_sealingToParents;
}

/**
 * The trip to which this error refers.
 */
- (FSRESERVATIONV1ErrorReference *) trip;

/**
 * The trip to which this error refers.
 */
- (void) setTrip: (FSRESERVATIONV1ErrorReference *) newTrip;

/**
 * The person to which this error refers.
 */
- (FSRESERVATIONV1ErrorReference *) person;

/**
 * The person to which this error refers.
 */
- (void) setPerson: (FSRESERVATIONV1ErrorReference *) newPerson;

/**
 * The card to which this error refers.
 */
- (FSRESERVATIONV1ErrorReference *) card;

/**
 * The card to which this error refers.
 */
- (void) setCard: (FSRESERVATIONV1ErrorReference *) newCard;

/**
 * The reference to the baptism.
 */
- (FSRESERVATIONV1OrdinanceReference *) baptism;

/**
 * The reference to the baptism.
 */
- (void) setBaptism: (FSRESERVATIONV1OrdinanceReference *) newBaptism;

/**
 * The reference to the confirmation.
 */
- (FSRESERVATIONV1OrdinanceReference *) confirmation;

/**
 * The reference to the confirmation.
 */
- (void) setConfirmation: (FSRESERVATIONV1OrdinanceReference *) newConfirmation;

/**
 * The reference to the initiatory.
 */
- (FSRESERVATIONV1OrdinanceReference *) initiatory;

/**
 * The reference to the initiatory.
 */
- (void) setInitiatory: (FSRESERVATIONV1OrdinanceReference *) newInitiatory;

/**
 * The reference to the endowment.
 */
- (FSRESERVATIONV1OrdinanceReference *) endowment;

/**
 * The reference to the endowment.
 */
- (void) setEndowment: (FSRESERVATIONV1OrdinanceReference *) newEndowment;

/**
 * The reference to the sealing-to-spouse.
 */
- (FSRESERVATIONV1OrdinanceReference *) sealingToSpouse;

/**
 * The reference to the sealing-to-spouse.
 */
- (void) setSealingToSpouse: (FSRESERVATIONV1OrdinanceReference *) newSealingToSpouse;

/**
 * The reference to the sealing-to-parents.
 */
- (FSRESERVATIONV1OrdinanceReference *) sealingToParents;

/**
 * The reference to the sealing-to-parents.
 */
- (void) setSealingToParents: (FSRESERVATIONV1OrdinanceReference *) newSealingToParents;
@end /* interface FSRESERVATIONV1ReservationError */
