        -:    0:Source:/Users/logan/Projects/FSKit/Source/FSKFamilyTreeService.m
        -:    0:Graph:/Users/logan/Projects/builds/FSKit.build/Coverage/FSKit.build/Objects-normal/ppc/FSKFamilyTreeService.gcno
        -:    0:Data:/Users/logan/Projects/builds/FSKit.build/Coverage/FSKit.build/Objects-normal/ppc/FSKFamilyTreeService.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1://
        -:    2://  FamilyTreeService.m
        -:    3://  FSKit
        -:    4://
        -:    5://  Created by Logan Allred on 9/16/07.
        -:    6://  Copyright 2008 Logan Allred. All rights reserved.
        -:    7://
        -:    8:
        -:    9:#import "FSKFamilyTreeService.h"
        -:   10:
        -:   11:NSString * const PERSON_ENDPOINT  = @"person";
        -:   12:NSString * const SEARCH_ENDPOINT = @"search";
        -:   13:NSString * const USER_ENDPOINT = @"user";
        -:   14:NSString * const PERSONA_ENDPOINT = @"persona";
        -:   15:
        -:   16:@implementation FSKFamilyTreeService
        -:   17:
    #####:   18:+ (FSKFamilyTreeService *)familyTreeServiceWithConnection:(FSKConnection *)familySearchConnection delegate:theDelegate;
        -:   19:{
    #####:   20:	return [[[FSKFamilyTreeService alloc] initWithConnection:familySearchConnection delegate:theDelegate] autorelease];
        -:   21:}
        -:   22:
    #####:   23:- (id)initWithConnection:(FSKConnection *)familySearchConnection delegate:(id)theDelegate;
        -:   24:{
    #####:   25:    if ((self = [super initWithConnection:familySearchConnection delegate:theDelegate]) != nil) 
        -:   26:	{ 
    #####:   27:		moduleName = @"familytree";
    #####:   28:		versionString = @"v1";
        -:   29:	}
        -:   30:	
    #####:   31:	return self;
        -:   32:}
        -:   33:
        -:   34:- (void)dealloc
    #####:   35:{
    #####:   36:	[super dealloc];
        -:   37:}
        -:   38:
        -:   39:-(void)fetchFamilyTreeData:(NSString *)module path:(NSSet *)idList parameters:(NSDictionary *)parameterDict
    #####:   40:{
    #####:   41:	NSLog(@"%s, %@, %@, %@", __PRETTY_FUNCTION__, module, idList, parameterDict);
    #####:   42:	[self makeFamilySearchRequest:module idList:idList parameters:parameterDict];
        -:   43://	return nil;
        -:   44:}
        -:   45:
        -:   46:-(void)fetchPersonDataWithIds:(NSSet *)idList parameters:(NSDictionary *)parameterDict
    #####:   47:{
    #####:   48:	NSLog(@"%s, %@, %@", __PRETTY_FUNCTION__, idList, parameterDict);
    #####:   49:	[self fetchFamilyTreeData:@"person" path:idList parameters:parameterDict];
        -:   50:}
        -:   51:
        -:   52:
    #####:   53:- (void)readPersons:(NSSet *)personIds {
    #####:   54:	[self fetchPersonDataWithIds:personIds parameters:[NSDictionary dictionaryWithObjectsAndKeys:[NSArray arrayWithObjects:@"summary", @"values", nil], @"view", nil]];
        -:   55:}
        -:   56:
    #####:   57:- (void)readPerson:(NSString *)personId {
    #####:   58:	NSLog(@"%s", __PRETTY_FUNCTION__);
        -:   59:	//return 
    #####:   60:	[self readPersons:[NSSet setWithObject:personId]];
        -:   61:}
        -:   62:
        -:   63:-(void)searchByFullName:(NSString *)fullName
    #####:   64:{
    #####:   65:	NSLog(@"%s", __PRETTY_FUNCTION__);
        -:   66:}
        -:   67:
        -:   68:-(void)searchByFamilyName:(NSString *)familyName givenNames:(NSString *)givenNames
    #####:   69:{
    #####:   70:	NSLog(@"%s", __PRETTY_FUNCTION__);
        -:   71:}
        -:   72:
        -:   73:-(void)searchWithCriteria:(NSDictionary *)searchCriteria
    #####:   74:{
    #####:   75:	NSLog(@"%s", __PRETTY_FUNCTION__);
        -:   76:}
        -:   77:
        -:   78:-(void) requestFinished:(NSXMLElement *)response
    #####:   79:{
    #####:   80:	NSLog(@"%s %@", __PRETTY_FUNCTION__, response);
    #####:   81:	if ([_delegate respondsToSelector:@selector(requestFinished:)])
        -:   82:	{
    #####:   83:		[_delegate requestFinished:response];
        -:   84:	}
        -:   85:}
        -:   86:
        -:   87:-(void) requestFailed:(NSError *)error
    #####:   88:{
    #####:   89:	NSLog(@"%s %@", __PRETTY_FUNCTION__, error);
        -:   90:	
        -:   91:}
        -:   92:
        -:   93:/*
        -:   94:		[FSKIdentityRequest *loginRequest = [[FSKIdentityRequest alloc] initWithFamilySearchConnection:familySearchConnection delegate:self selector:@selector(loginComplete:)];
        -:   95:		[loginRequest login];   
        -:   96:
        -:   97:- (void)loginComplete:(FSKIdentityResponse *)response
        -:   98:{
        -:   99:	if ([response statusCode] == 200)
        -:  100:	{
        -:  101:		[connection setSessionId:[response sessionId]];
        -:  102:	}
        -:  103:}
        -:  104:*/
        -:  105:
        -:  106:@end
