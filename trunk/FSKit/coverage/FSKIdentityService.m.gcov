        -:    0:Source:/Users/logan/Projects/FSKit/Source/FSKIdentityService.m
        -:    0:Graph:/Users/logan/Projects/builds/FSKit.build/Coverage/FSKit.build/Objects-normal/ppc/FSKIdentityService.gcno
        -:    0:Data:/Users/logan/Projects/builds/FSKit.build/Coverage/FSKit.build/Objects-normal/ppc/FSKIdentityService.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1://
        -:    2://  FSKIdentityService.m
        -:    3://  FSKit
        -:    4://
        -:    5://  Created by Logan Allred on 1/20/08.
        -:    6://  Copyright 2008 Logan Allred. All rights reserved.
        -:    7://
        -:    8:
        -:    9:#import "FSKIdentityService.h"
        -:   10:#import "FSKIdentityResponse.h"
        -:   11:#import "FSKLoginController.h"
        -:   12:
        -:   13:NSString * const LOGIN_ENDPOINT  = @"login";
        -:   14:NSString * const LOGOUT_ENDPOINT = @"logout";
        -:   15:
        -:   16:@implementation FSKIdentityService
        -:   17:
        -:   18:+ (FSKIdentityService *)identityServiceWithConnection:(FSKConnection *)familySearchConnection delegate:theDelegate
    #####:   19:{
    #####:   20:	return [[[FSKIdentityService alloc] initWithConnection:familySearchConnection delegate:theDelegate] autorelease];
        -:   21:}
        -:   22:
        -:   23:- (id)initWithConnection:(FSKConnection *)familySearchConnection delegate:(id)theDelegate
    #####:   24:{
    #####:   25:    if ((self = [super initWithConnection:familySearchConnection delegate:theDelegate]) != nil) 
        -:   26:	{ 
    #####:   27:		moduleName = @"identity";
    #####:   28:		versionString = @"v1";
        -:   29:	}
        -:   30:	
    #####:   31:	return self;
        -:   32:}
        -:   33:
    #####:   34:- (void)login {
    #####:   35:	NSLog(@"%s", __PRETTY_FUNCTION__);
    #####:   36:	FSKIdentityRequest *request = [[[FSKIdentityRequest alloc] initWithFamilySearchConnection:connection delegate:self selector:@selector(handleLoginResponse:)] retain]; 
    #####:   37:	[request sendLoginRequest];
        -:   38:}
        -:   39:
        -:   40:- (void)loginWithCredential:(NSURLCredential *)credential
    #####:   41:{
        -:   42://	NSXMLDocument* responseXML = [connection postFamilySearchData:myURL
        -:   43://												  withData:[[NSString stringWithFormat:@"username=%@&password=%@&key=%@", 
        -:   44://													  [credential user], [credential password], developerKey] dataUsingEncoding:NSUTF8StringEncoding] ofType:nil];
        -:   45:
        -:   46:}
        -:   47:
        -:   48:- (void)logout
    #####:   49:{
    #####:   50:	NSLog(@"%s", __PRETTY_FUNCTION__);
        -:   51:
        -:   52:}
        -:   53:
        -:   54:-(void) requestFinished:(NSXMLElement *)response
    #####:   55:{
    #####:   56:	NSLog(@"%s %@", __PRETTY_FUNCTION__, response);
        -:   57:}
        -:   58:
        -:   59:-(void) requestFailed:(NSError *)error
    #####:   60:{
    #####:   61:	NSLog(@"%s %@", __PRETTY_FUNCTION__, error);
        -:   62:}
        -:   63:
        -:   64:@end
        -:   65:
        -:   66:@implementation FSKIdentityService(PrivateMethods)
        -:   67:- (void)handleLoginResponse:(NSXMLDocument *)responseXML
    #####:   68:{
    #####:   69:	NSLog(@"%s %@", __PRETTY_FUNCTION__, responseXML);
        -:   70:
    #####:   71:	NSLog(@"login results:\n%@", [responseXML XMLStringWithOptions:NSXMLNodePrettyPrint]);
        -:   72://	NSLog(@"session doc: %@ %@ %@", [responseXML rootElement], [responseXML nodesForXPath:@"." error:nil], [[[responseXML nodesForXPath:@"./session" error:nil] lastObject] attributeForName:@"version"]);
    #####:   73:	NSXMLElement *rootNode = [responseXML rootElement];
    #####:   74:	NSLog(@"root node: %@ %@ %@", [[[rootNode nodesForXPath:@"//session/@id" error:nil] lastObject] stringValue], [rootNode nodesForXPath:@"//session/@id" error:nil], [[rootNode attributeForName:@"version"] stringValue]);
        -:   75:	
    #####:   76:	FSKIdentityResponse *response = [[FSKIdentityResponse alloc] initWithXML:responseXML];
    #####:   77:	[connection setSessionId:[response sessionId]]; 
        -:   78:}
        -:   79:
        -:   80:- (void)handleAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge
    #####:   81:{
    #####:   82:	if ([challenge previousFailureCount] < 3)
        -:   83:	{
        -:   84:		// set default value, allow app delegate to override
    #####:   85:		NSWindow *window = [NSApp mainWindow];
    #####:   86:		if ([_delegate respondsToSelector:@selector(windowForAuthenticationSheet:)])
        -:   87:		{
    #####:   88:			window = [_delegate windowForAuthenticationSheet:(FSKRequest *)self];
        -:   89:		}
        -:   90:		
    #####:   91:		FSKLoginController *loginController = [[FSKLoginController alloc] init];
    #####:   92:		[loginController startAuthentication:challenge window:window];
        -:   93:	} else
        -:   94:	{
        -:   95:		// If we don't have a valid credential, or have already failed auth 3x...
    #####:   96:		[[challenge sender] cancelAuthenticationChallenge:challenge];
        -:   97:	}
        -:   98:}
        -:   99:
    #####:  100:- (void)request:(FSKRequest *)request didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge;
        -:  101:{
    #####:  102:	NSLog(@"FSKRequest %s %@", __PRETTY_FUNCTION__, challenge);
    #####:  103:	[self handleAuthenticationChallenge:challenge];
        -:  104:}
        -:  105:
        -:  106:-(void)fetchIdentityData:(NSString *)module path:(NSSet *)idList parameters:(NSDictionary *)parameterDict
    #####:  107:{
    #####:  108:	NSLog(@"%s, %@, %@, %@", __PRETTY_FUNCTION__, module, idList, parameterDict);
    #####:  109:	[self makeFamilySearchRequest:module idList:idList parameters:parameterDict];
        -:  110://	return nil;
        -:  111:}
        -:  112:
        -:  113:@end
