//
// This code was generated by Enunciate.
// http://enunciate.codehaus.org/
//
#import <libxml/xmlwriter.h>
#import <libxml/xmlreader.h>
#import <Foundation/Foundation.h>

#ifndef DEBUG_ENUNCIATE
//turn off enunciate debugging.
#define DEBUG_ENUNCIATE 0
#endif

/**
 * Enunciate-specific interfaces and protocols.
 */
#ifndef ENUNCIATE_OBJC_TYPES
#define ENUNCIATE_OBJC_TYPES

/**
 * Protocol defining an Enunciate XML I/O methods.
 */
@protocol EnunciateXML

/**
 * Read an instance from XML.
 *
 * @param xml The XML to read.
 */
+ (id<EnunciateXML>) readFromXML: (NSData *) xml;

/**
 * Write this instance as XML.
 *
 * @return The XML.
 */
- (NSData *) writeToXML;

@end /*protocol EnunciateXML*/


/**
 * A basic XML node. Can be an element or an attribute. Used
 * instead of NSXMLElement because it's not supported on all
 * platforms yet.
 */
@interface JAXBBasicXMLNode : NSObject
{
  @private
    NSString *_name;
    NSString *_ns;
    NSString *_prefix;
    NSString *_value;
    NSArray  *_childElements;
    NSArray  *_attributes;
}

/**
 * Accessor for the (local) name of the XML node.
 *
 * @return The (local) name of the XML node.
 */
- (NSString *) name;

/**
 * Accessor for the (local) name of the XML node.
 *
 * @param newName The (local) name of the XML node.
 */
- (void) setName: (NSString *) newName;

/**
 * Accessor for the namespace of the XML node.
 *
 * @return The namespace of the XML node.
 */
- (NSString *) ns;

/**
 * Accessor for the namespace of the XML node.
 *
 * @param newNs The namespace of the XML node.
 */
- (void) setNs: (NSString *) newNs;

/**
 * Accessor for the namespace prefix of the XML node.
 *
 * @return The namespace prefix of the XML node.
 */
- (NSString *) prefix;

/**
 * Accessor for the namespace prefix of the XML node.
 *
 * @param newPrefix The namespace prefix of the XML node.
 */
- (void) setPrefix: (NSString *) newPrefix;

/**
 * Accessor for the value of the XML node.
 *
 * @return The value of the XML node.
 */
- (NSString *) value;

/**
 * Accessor for the value of the XML node.
 *
 * @param newValue The value of the XML node.
 */
- (void) setValue: (NSString *) newValue;

/**
 * Accessor for the child elements of the XML node.
 *
 * @return The child elements of the XML node.
 */
- (NSArray *) childElements;

/**
 * Accessor for the child elements of the XML node.
 *
 * @param newValue The child elements of the XML node.
 */
- (void) setChildElements: (NSArray *) newChildElements;

/**
 * Accessor for the attributes of the XML node.
 *
 * @return The attributes of the XML node.
 */
- (NSArray *) attributes;

/**
 * Accessor for the attributes of the XML node.
 *
 * @param newAttributes The attributes of the XML node.
 */
- (void) setAttributes: (NSArray *) newAttributes;
@end /*interface JAXBBasicXMLNode*/

#endif /* ENUNCIATE_OBJC_TYPES */


/**
 * (no documentation provided)
 */
enum FSIDENTITYV2AAuthenticationStatus
{

  /**
   * (no documentation provided)
   */
  IDENTITY_IDENTITY_V2_AUTHENTICATIONSTATUS_SUCCESS,

  /**
   * (no documentation provided)
   */
  IDENTITY_IDENTITY_V2_AUTHENTICATIONSTATUS_FAILURE,

  /**
   * (no documentation provided)
   */
  IDENTITY_IDENTITY_V2_AUTHENTICATIONSTATUS_RESOLUTION_REQUIRED,

  /**
   * (no documentation provided)
   */
  IDENTITY_IDENTITY_V2_AUTHENTICATIONSTATUS_INVALID_KEY,

  /**
   * (no documentation provided)
   */
  IDENTITY_IDENTITY_V2_AUTHENTICATIONSTATUS_OTHER
};

/**
 * Reads a AuthenticationStatus from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The AuthenticationStatus, or NULL if unable to be read.
 */
static enum FSIDENTITYV2AAuthenticationStatus *xmlTextReaderReadFSIDENTITYV2AAuthenticationStatusType(xmlTextReaderPtr reader);

/**
 * Writes a AuthenticationStatus to XML.
 *
 * @param writer The XML writer.
 * @param _authenticationStatus The AuthenticationStatus to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSIDENTITYV2AAuthenticationStatusType(xmlTextWriterPtr writer, enum FSIDENTITYV2AAuthenticationStatus *_authenticationStatus);

/**
 * (no documentation provided)
 */
enum FSV1ErrorLevel
{

  /**
   * (no documentation provided)
   */
  IDENTITY_FSAPI_V1_ERRORLEVEL_INFO,

  /**
   * (no documentation provided)
   */
  IDENTITY_FSAPI_V1_ERRORLEVEL_WARN,

  /**
   * (no documentation provided)
   */
  IDENTITY_FSAPI_V1_ERRORLEVEL_ERROR
};

/**
 * Reads a ErrorLevel from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The ErrorLevel, or NULL if unable to be read.
 */
static enum FSV1ErrorLevel *xmlTextReaderReadFSV1ErrorLevelType(xmlTextReaderPtr reader);

/**
 * Writes a ErrorLevel to XML.
 *
 * @param writer The XML writer.
 * @param _errorLevel The ErrorLevel to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSV1ErrorLevelType(xmlTextWriterPtr writer, enum FSV1ErrorLevel *_errorLevel);

@class FSIDENTITYV2ASession;
@class FSIDENTITYV2AAuthentication;
@class FSIDENTITYV2AUser;
@class FSIDENTITYV2ASessionValue;
@class FSIDENTITYV1Session;
@class FSV1BasicProperty;
@class FSV1BasicError;
@class FSV1BasicElement;
@class FSIDENTITYV2AIdentityStatus;
@class FSIDENTITYV2AIdentityProperty;
@class FSIDENTITYV1Identity;
@class FSIDENTITYV2AIdentity;


/**
 * (no documentation provided)
 */
@interface FSIDENTITYV2ASession : NSObject
{
  @private
    NSString *_id;
    NSArray *_values;
}

/**
 * session id.
 */
- (NSString *) id;

/**
 * session id.
 */
- (void) setId: (NSString *) newId;

/**
 * session values.
 */
- (NSArray *) values;

/**
 * session values.
 */
- (void) setValues: (NSArray *) newValues;
@end /* interface FSIDENTITYV2ASession */

/**
 * (no documentation provided)
 */
@interface FSIDENTITYV2AAuthentication : NSObject
{
  @private
    enum FSIDENTITYV2AAuthenticationStatus *_status;
    NSString *_resolutionUri;
}

/**
 * authentication status.
 */
- (enum FSIDENTITYV2AAuthenticationStatus *) status;

/**
 * authentication status.
 */
- (void) setStatus: (enum FSIDENTITYV2AAuthenticationStatus *) newStatus;

/**
 * authentication resolution URI.
 */
- (NSString *) resolutionUri;

/**
 * authentication resolution URI.
 */
- (void) setResolutionUri: (NSString *) newResolutionUri;
@end /* interface FSIDENTITYV2AAuthentication */

/**
 * (no documentation provided)
 */
@interface FSIDENTITYV2AUser : NSObject
{
  @private
    NSString *_id;
    NSString *_displayName;
    NSString *_email;
}

/**
 * (no documentation provided)
 */
- (NSString *) id;

/**
 * (no documentation provided)
 */
- (void) setId: (NSString *) newId;

/**
 * (no documentation provided)
 */
- (NSString *) displayName;

/**
 * (no documentation provided)
 */
- (void) setDisplayName: (NSString *) newDisplayName;

/**
 * (no documentation provided)
 */
- (NSString *) email;

/**
 * (no documentation provided)
 */
- (void) setEmail: (NSString *) newEmail;
@end /* interface FSIDENTITYV2AUser */

/**
 * (no documentation provided)
 */
@interface FSIDENTITYV2ASessionValue : NSObject
{
  @private
    NSString *_name;
    NSString *_value;
}

/**
 * session value name.
 */
- (NSString *) name;

/**
 * session value name.
 */
- (void) setName: (NSString *) newName;

/**
 * session value value.
 */
- (NSString *) value;

/**
 * session value value.
 */
- (void) setValue: (NSString *) newValue;
@end /* interface FSIDENTITYV2ASessionValue */

/**
 *  A identity session.

 @author Rob Lyon

 */
@interface FSIDENTITYV1Session : NSObject
{
  @private
    NSString *_id;
}

/**
 * The id of the session.
 */
- (NSString *) id;

/**
 * The id of the session.
 */
- (void) setId: (NSString *) newId;
@end /* interface FSIDENTITYV1Session */

/**
 * (no documentation provided)
 */
@interface FSV1BasicProperty : NSObject
{
  @private
    NSString *_name;
    NSString *_value;
}

/**
 * (no documentation provided)
 */
- (NSString *) name;

/**
 * (no documentation provided)
 */
- (void) setName: (NSString *) newName;

/**
 * (no documentation provided)
 */
- (NSString *) value;

/**
 * (no documentation provided)
 */
- (void) setValue: (NSString *) newValue;
@end /* interface FSV1BasicProperty */

/**
 * (no documentation provided)
 */
@interface FSV1BasicError : NSObject
{
  @private
    enum FSV1ErrorLevel *_level;
    int *_subcode;
    int _code;
    NSString *_message;
    NSString *_details;
}

/**
 * (no documentation provided)
 */
- (enum FSV1ErrorLevel *) level;

/**
 * (no documentation provided)
 */
- (void) setLevel: (enum FSV1ErrorLevel *) newLevel;

/**
 * (no documentation provided)
 */
- (int *) subcode;

/**
 * (no documentation provided)
 */
- (void) setSubcode: (int *) newSubcode;

/**
 * (no documentation provided)
 */
- (int) code;

/**
 * (no documentation provided)
 */
- (void) setCode: (int) newCode;

/**
 * (no documentation provided)
 */
- (NSString *) message;

/**
 * (no documentation provided)
 */
- (void) setMessage: (NSString *) newMessage;

/**
 * (no documentation provided)
 */
- (NSString *) details;

/**
 * (no documentation provided)
 */
- (void) setDetails: (NSString *) newDetails;
@end /* interface FSV1BasicError */

/**
 * (no documentation provided)
 */
@interface FSV1BasicElement : NSObject
{
  @private
    int *_statusCode;
    BOOL *_deprecated;
    NSString *_statusMessage;
    NSString *_version;
    NSArray *_errors;
    NSArray *_properties;
}

/**
 * (no documentation provided)
 */
- (int *) statusCode;

/**
 * (no documentation provided)
 */
- (void) setStatusCode: (int *) newStatusCode;

/**
 * (no documentation provided)
 */
- (BOOL *) deprecated;

/**
 * (no documentation provided)
 */
- (void) setDeprecated: (BOOL *) newDeprecated;

/**
 * (no documentation provided)
 */
- (NSString *) statusMessage;

/**
 * (no documentation provided)
 */
- (void) setStatusMessage: (NSString *) newStatusMessage;

/**
 * (no documentation provided)
 */
- (NSString *) version;

/**
 * (no documentation provided)
 */
- (void) setVersion: (NSString *) newVersion;

/**
 * (no documentation provided)
 */
- (NSArray *) errors;

/**
 * (no documentation provided)
 */
- (void) setErrors: (NSArray *) newErrors;

/**
 * (no documentation provided)
 */
- (NSArray *) properties;

/**
 * (no documentation provided)
 */
- (void) setProperties: (NSArray *) newProperties;
@end /* interface FSV1BasicElement */

/**
 *  @author Ryan Heaton

 */
@interface FSIDENTITYV2AIdentityStatus : NSObject
{
  @private
    int _code;
    int *_subcode;
    NSString *_message;
    NSString *_details;
}

/**
 * (no documentation provided)
 */
- (int) code;

/**
 * (no documentation provided)
 */
- (void) setCode: (int) newCode;

/**
 * (no documentation provided)
 */
- (int *) subcode;

/**
 * (no documentation provided)
 */
- (void) setSubcode: (int *) newSubcode;

/**
 * (no documentation provided)
 */
- (NSString *) message;

/**
 * (no documentation provided)
 */
- (void) setMessage: (NSString *) newMessage;

/**
 * (no documentation provided)
 */
- (NSString *) details;

/**
 * (no documentation provided)
 */
- (void) setDetails: (NSString *) newDetails;
@end /* interface FSIDENTITYV2AIdentityStatus */

/**
 *  @author Ryan Heaton

 */
@interface FSIDENTITYV2AIdentityProperty : NSObject
{
  @private
    NSString *_name;
    NSString *_value;
}

/**
 * (no documentation provided)
 */
- (NSString *) name;

/**
 * (no documentation provided)
 */
- (void) setName: (NSString *) newName;

/**
 * (no documentation provided)
 */
- (NSString *) value;

/**
 * (no documentation provided)
 */
- (void) setValue: (NSString *) newValue;
@end /* interface FSIDENTITYV2AIdentityProperty */

/**
 *  @author Ryan Heaton

 */
@interface FSIDENTITYV1Identity : FSV1BasicElement <EnunciateXML>
{
  @private
    FSIDENTITYV1Session *_session;
}

/**
 * The session associated with the identity.
 */
- (FSIDENTITYV1Session *) session;

/**
 * The session associated with the identity.
 */
- (void) setSession: (FSIDENTITYV1Session *) newSession;
@end /* interface FSIDENTITYV1Identity */

/**
 *  @author Brian Pugh

 */
@interface FSIDENTITYV2AIdentity : NSObject <EnunciateXML>
{
  @private
    int *_statusCode;
    BOOL *_deprecated;
    NSString *_statusMessage;
    NSString *_version;
    FSIDENTITYV2AAuthentication *_authentication;
    FSIDENTITYV2ASession *_session;
    NSArray *_status;
    NSArray *_users;
    NSArray *_properties;
}

/**
 * (no documentation provided)
 */
- (int *) statusCode;

/**
 * (no documentation provided)
 */
- (void) setStatusCode: (int *) newStatusCode;

/**
 * (no documentation provided)
 */
- (BOOL *) deprecated;

/**
 * (no documentation provided)
 */
- (void) setDeprecated: (BOOL *) newDeprecated;

/**
 * (no documentation provided)
 */
- (NSString *) statusMessage;

/**
 * (no documentation provided)
 */
- (void) setStatusMessage: (NSString *) newStatusMessage;

/**
 * (no documentation provided)
 */
- (NSString *) version;

/**
 * (no documentation provided)
 */
- (void) setVersion: (NSString *) newVersion;

/**
 * authentication information.
 */
- (FSIDENTITYV2AAuthentication *) authentication;

/**
 * authentication information.
 */
- (void) setAuthentication: (FSIDENTITYV2AAuthentication *) newAuthentication;

/**
 * session information.
 */
- (FSIDENTITYV2ASession *) session;

/**
 * session information.
 */
- (void) setSession: (FSIDENTITYV2ASession *) newSession;

/**
 * The status list.
 */
- (NSArray *) status;

/**
 * The status list.
 */
- (void) setStatus: (NSArray *) newStatus;

/**
 * users.
 */
- (NSArray *) users;

/**
 * users.
 */
- (void) setUsers: (NSArray *) newUsers;

/**
 * The properties.
 */
- (NSArray *) properties;

/**
 * The properties.
 */
- (void) setProperties: (NSArray *) newProperties;
@end /* interface FSIDENTITYV2AIdentity */
