//
// This code was generated by Enunciate.
// http://enunciate.codehaus.org/
//
#include <libxml/xmlwriter.h>
#include <libxml/xmlreader.h>
#include <Foundation/Foundation.h>

#ifndef DEBUG_ENUNCIATE
//turn off enunciate debugging.
#define DEBUG_ENUNCIATE 0
#endif

/**
 * Enunciate-specific interfaces and protocols.
 */
#ifndef ENUNCIATE_OBJC_TYPES
#define ENUNCIATE_OBJC_TYPES

/**
 * Protocol defining an Enunciate XML I/O methods.
 */
@protocol EnunciateXML

/**
 * Read an instance from XML.
 *
 * @param xml The XML to read.
 */
+ (id<EnunciateXML>) readFromXML: (NSData *) xml;

/**
 * Write this instance as XML.
 *
 * @return The XML.
 */
- (NSData *) writeToXML;

@end /*protocol EnunciateXML*/


/**
 * A basic XML node. Can be an element or an attribute. Used
 * instead of NSXMLElement because it's not supported on all
 * platforms yet.
 */
@interface JAXBBasicXMLNode : NSObject
{
  @private
    NSString *_name;
    NSString *_ns;
    NSString *_prefix;
    NSString *_value;
    NSArray  *_childElements;
    NSArray  *_attributes;
}

/**
 * Accessor for the (local) name of the XML node.
 *
 * @return The (local) name of the XML node.
 */
- (NSString *) name;

/**
 * Accessor for the (local) name of the XML node.
 *
 * @param newName The (local) name of the XML node.
 */
- (void) setName: (NSString *) newName;

/**
 * Accessor for the namespace of the XML node.
 *
 * @return The namespace of the XML node.
 */
- (NSString *) ns;

/**
 * Accessor for the namespace of the XML node.
 *
 * @param newNs The namespace of the XML node.
 */
- (void) setNs: (NSString *) newNs;

/**
 * Accessor for the namespace prefix of the XML node.
 *
 * @return The namespace prefix of the XML node.
 */
- (NSString *) prefix;

/**
 * Accessor for the namespace prefix of the XML node.
 *
 * @param newPrefix The namespace prefix of the XML node.
 */
- (void) setPrefix: (NSString *) newPrefix;

/**
 * Accessor for the value of the XML node.
 *
 * @return The value of the XML node.
 */
- (NSString *) value;

/**
 * Accessor for the value of the XML node.
 *
 * @param newValue The value of the XML node.
 */
- (void) setValue: (NSString *) newValue;

/**
 * Accessor for the child elements of the XML node.
 *
 * @return The child elements of the XML node.
 */
- (NSArray *) childElements;

/**
 * Accessor for the child elements of the XML node.
 *
 * @param newValue The child elements of the XML node.
 */
- (void) setChildElements: (NSArray *) newChildElements;

/**
 * Accessor for the attributes of the XML node.
 *
 * @return The attributes of the XML node.
 */
- (NSArray *) attributes;

/**
 * Accessor for the attributes of the XML node.
 *
 * @param newAttributes The attributes of the XML node.
 */
- (void) setAttributes: (NSArray *) newAttributes;
@end /*interface JAXBBasicXMLNode*/

#endif /* ENUNCIATE_OBJC_TYPES */


/**
 *  Change Action Type

 @author Rob Lyon

 */
enum FSFAMILYTREEV2ChangeActionType
{

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CHANGEACTIONTYPE_ABSOLUTE_COMBINE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CHANGEACTIONTYPE_CMIS_ODM_COMBINE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CHANGEACTIONTYPE_EXACT_MATCH_COMBINE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CHANGEACTIONTYPE_GFE_GIANT_COMBINE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CHANGEACTIONTYPE_MANUAL_COMBINE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CHANGEACTIONTYPE_RECURSIVE_FAMILY_COMBINE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CHANGEACTIONTYPE_SUBSET_MATCH_COMBINE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CHANGEACTIONTYPE_MANUAL_SEPARATE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CHANGEACTIONTYPE_GEDCOM_COMBINE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CHANGEACTIONTYPE_ZIP_COMBINE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CHANGEACTIONTYPE_IMS_AUTO_COMBINE
};

/**
 * Reads a ChangeActionType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The ChangeActionType, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2ChangeActionType *xmlTextReaderReadFSFAMILYTREEV2ChangeActionTypeType(xmlTextReaderPtr reader);

/**
 * Writes a ChangeActionType to XML.
 *
 * @param writer The XML writer.
 * @param _changeActionType The ChangeActionType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2ChangeActionTypeType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2ChangeActionType *_changeActionType);

/**
 *  Citation Field Type

 @author Rob Lyon

 */
enum FSFAMILYTREEV2CitationFieldType
{

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_ACTUAL_TEXT,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_BATCH_NUMBER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_BATCH_TYPE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_BOOK_NUMBER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_CALL_NUMBER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_DESCRIPTION,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_EVENT_DATE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_EVENT_ROLE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_EVENT_TYPE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_FRAME_NUMBER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_IMAGE_NUMBER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_LINK,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_LDS_TEMPLE_RECORD_NUMBER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_LOCATION_IN_SOURCE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_PAGE_NUMBER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_RECORD_NUMBER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_REFERENCE_NUMBER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_SERIAL_NUMBER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONFIELDTYPE_SHEET_NUMBER
};

/**
 * Reads a CitationFieldType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The CitationFieldType, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2CitationFieldType *xmlTextReaderReadFSFAMILYTREEV2CitationFieldTypeType(xmlTextReaderPtr reader);

/**
 * Writes a CitationFieldType to XML.
 *
 * @param writer The XML writer.
 * @param _citationFieldType The CitationFieldType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2CitationFieldTypeType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2CitationFieldType *_citationFieldType);

/**
 *  @author Ryan Heaton

 */
enum FSFAMILYTREEV2EventType
{

  /**
   *  Adoption

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_ADOPTION,

  /**
   *  Adult Christening

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_ADULT_CHRISTENING,

  /**
   *  Non LDS Baptism

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_BAPTISM,

  /**
   *  Non LDS Confirmation

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_CONFIRMATION,

  /**
   *  Bar Mitzvah

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_BAR_MITZVAH,

  /**
   *  Bas Mitzvah

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_BAS_MITZVAH,

  /**
   *  Birth

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_BIRTH,

  /**
   *  Blessing

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_BLESSING,

  /**
   *  Burial

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_BURIAL,

  /**
   *  Christening

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_CHRISTENING,

  /**
   *  Cremation

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_CREMATION,

  /**
   *  Death

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_DEATH,

  /**
   *  Graduation

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_GRADUATION,

  /**
   *  Immigration

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_IMMIGRATION,

  /**
   *  Military Service

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_MILITARY_SERVICE,

  /**
   *  Mission

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_MISSION,

  /**
   *  Move

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_MOVE,

  /**
   *  Naturalization

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_NATURALIZATION,

  /**
   *  Probate

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_PROBATE,

  /**
   *  Retirement

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_RETIREMENT,

  /**
   *  Will

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_WILL,

  /**
   *  Annulment.

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_ANNULMENT,

  /**
   *  Divorce.

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_DIVORCE,

  /**
   *  Divorce Filing.

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_DIVORCE_FILING,

  /**
   *  Engagement

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_ENGAGEMENT,

  /**
   *  Marriage.

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_MARRIAGE,

  /**
   *  Marriage Notice.

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_MARRIAGE_BANNS,

  /**
   *  Marriage Contract.

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_MARRIAGE_CONTRACT,

  /**
   *  Marriage License.

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_MARRIAGE_LICENSE,

  /**
   *  A user-defined event.

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_OTHER,

  /**
   *  Census

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_CENSUS,

  /**
   *  Circumcision

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_CIRCUMCISION,

  /**
   *  Emigration

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_EMIGRATION,

  /**
   *  Excommunication

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_EXCOMMUNICATION,

  /**
   *  First Communion

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_FIRST_COMMUNION,

  /**
   *  First Known Child

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_FIRST_KNOWN_CHILD,

  /**
   *  Funeral

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_FUNERAL,

  /**
   *  Hospitalization

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_HOSPITALIZATION,

  /**
   *  Illness

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_ILLNESS,

  /**
   *  Naming

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_NAMING,

  /**
   *  Marriage Settlement

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_MARRIAGE_SETTLEMENT,

  /**
   *  Miscarriage

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_MISCARRIAGE,

  /**
   *  Ordination

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_ORDINATION,

  /**
   *  Separation

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_SEPARATION,

  /**
   *  Time Only Marriage

   */
  FAMILYTREE_FAMILYTREE_V2_EVENTTYPE_TIME_ONLY_MARRIAGE
};

/**
 * Reads a EventType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The EventType, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2EventType *xmlTextReaderReadFSFAMILYTREEV2EventTypeType(xmlTextReaderPtr reader);

/**
 * Writes a EventType to XML.
 *
 * @param writer The XML writer.
 * @param _eventType The EventType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2EventTypeType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2EventType *_eventType);

/**
 *  Source Type

 @author Rob Lyon

 */
enum FSFAMILYTREEV2SourceType
{

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCETYPE_CHURCH_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCETYPE_COMPANY_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCETYPE_FAMILY_POSSESSION,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCETYPE_GOVERNMENT_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCETYPE_MEMORY_OF_SOMEONE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCETYPE_PUBLISHED_INFORMATION,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCETYPE_SCHOOL_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCETYPE_OTHER
};

/**
 * Reads a SourceType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The SourceType, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2SourceType *xmlTextReaderReadFSFAMILYTREEV2SourceTypeType(xmlTextReaderPtr reader);

/**
 * Writes a SourceType to XML.
 *
 * @param writer The XML writer.
 * @param _sourceType The SourceType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2SourceTypeType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2SourceType *_sourceType);

/**
 *  @author Duane Kuehne

 */
enum FSFAMILYTREEV2UserPreferenceType
{

  /**
   * 

   */
  FAMILYTREE_FAMILYTREE_V2_USERPREFERENCETYPE_DISPLAYCONTACTNAME,

  /**
   * 

   */
  FAMILYTREE_FAMILYTREE_V2_USERPREFERENCETYPE_DISPLAYFULLNAME,

  /**
   * 

   */
  FAMILYTREE_FAMILYTREE_V2_USERPREFERENCETYPE_DISPLAYPHONE,

  /**
   * 

   */
  FAMILYTREE_FAMILYTREE_V2_USERPREFERENCETYPE_DISPLAYEMAIL,

  /**
   * 

   */
  FAMILYTREE_FAMILYTREE_V2_USERPREFERENCETYPE_DISPLAYPOSTALADDRESS,

  /**
   * 

   */
  FAMILYTREE_FAMILYTREE_V2_USERPREFERENCETYPE_PREFERREDLOCALE
};

/**
 * Reads a UserPreferenceType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The UserPreferenceType, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2UserPreferenceType *xmlTextReaderReadFSFAMILYTREEV2UserPreferenceTypeType(xmlTextReaderPtr reader);

/**
 * Writes a UserPreferenceType to XML.
 *
 * @param writer The XML writer.
 * @param _userPreferenceType The UserPreferenceType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2UserPreferenceTypeType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2UserPreferenceType *_userPreferenceType);

/**
 *  User Permission

 @author Rob Lyon

 */
enum FSFAMILYTREEV2UserPermission
{

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_USERPERMISSION_READ,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_USERPERMISSION_WRITE
};

/**
 * Reads a UserPermission from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The UserPermission, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2UserPermission *xmlTextReaderReadFSFAMILYTREEV2UserPermissionType(xmlTextReaderPtr reader);

/**
 * Writes a UserPermission to XML.
 *
 * @param writer The XML writer.
 * @param _userPermission The UserPermission to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2UserPermissionType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2UserPermission *_userPermission);

/**
 *  Source Field Type

 @author Rob Lyon

 */
enum FSFAMILYTREEV2SourceFieldType
{

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEFIELDTYPE_ABBREVIATION,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEFIELDTYPE_ACTUAL_TEXT,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEFIELDTYPE_AGENCY,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEFIELDTYPE_AUTHOR,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEFIELDTYPE_BATCH_NUMBER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEFIELDTYPE_CALL_NUMBER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEFIELDTYPE_FILM_NUMBER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEFIELDTYPE_LANGUAGE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEFIELDTYPE_LINK,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEFIELDTYPE_LOCALITY,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEFIELDTYPE_PLACE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEFIELDTYPE_PROVIDER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEFIELDTYPE_PUBLICATION_INFORMATION,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEFIELDTYPE_REFERENCE_NUMBER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEFIELDTYPE_TEMPLATE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEFIELDTYPE_TEMPLATE_TYPE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEFIELDTYPE_TIME_PERIOD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEFIELDTYPE_TITLE
};

/**
 * Reads a SourceFieldType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The SourceFieldType, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2SourceFieldType *xmlTextReaderReadFSFAMILYTREEV2SourceFieldTypeType(xmlTextReaderPtr reader);

/**
 * Writes a SourceFieldType to XML.
 *
 * @param writer The XML writer.
 * @param _sourceFieldType The SourceFieldType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2SourceFieldTypeType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2SourceFieldType *_sourceFieldType);

/**
 *  Source Detail

 @author Rob Lyon

 */
enum FSFAMILYTREEV2SourceDetail
{

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_ADOPTION_PAPERS,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_ANNIVERSARY_ANNOUNCEMENT,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_BAPTISM_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_BIRTH_ANNOUNCEMENT,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_BIRTH_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_BLESSING_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_BURIAL_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_CEMETERY_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_CENSUS_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_CHRISTENING_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_CITIZENSHIP_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_COURT_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_DEATH_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_DIPLOMA,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_DIVORCE_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_FAMILY_BIBLE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_FAMILY_GENEALOGIES,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_MEMORY_OF_FRIEND,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_FUNERAL_PROGRAM,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_HANDWRITTEN_INFORMATION,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_HONOR_ROLL,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_INSURANCE_POLICY,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_JOURNAL,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_LAND_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_LETTER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_MARRIAGE_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_MEDICAL_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_MILITARY_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_MORTGAGE_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_MY_MEMORY,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_NEWSPAPER_ARTICLE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_OBITUARY,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_ORDINATION_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_MEMORY_OF_PARENT,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_PASSENGER_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_PHOTOGRAPHS,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_PROBATE_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_MEMORY_OF_RELATIVE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_MEMORY_OF_SIBLING,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_REPORT_CARD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_SOCIAL_SECURITY_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_SOCIETY_MEMBERSHIP,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_TAX_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_TRANSCRIPT,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_VOTING_RECORD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_WEDDING_ANNOUNCEMENT,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_YEARBOOK,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_UNKNOWN,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_SOURCEDETAIL_OTHER
};

/**
 * Reads a SourceDetail from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The SourceDetail, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2SourceDetail *xmlTextReaderReadFSFAMILYTREEV2SourceDetailType(xmlTextReaderPtr reader);

/**
 * Writes a SourceDetail to XML.
 *
 * @param writer The XML writer.
 * @param _sourceDetail The SourceDetail to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2SourceDetailType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2SourceDetail *_sourceDetail);

/**
 *  The field type of a search parameter.

 @author Ryan Heaton

 */
enum FSFAMILYTREEV2SearchMatchParameterField
{

  /**
   *  The person id.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_ID,

  /**
   *  The gender.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_GENDER,

  /**
   *  The name.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_NAME,

  /**
   *  The given name.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_GIVENNAME,

  /**
   *  The surname.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_FAMILYNAME,

  /**
   *  The name suffix.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_NAMESUFFIX,

  /**
   *  The birth date.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_BIRTHDATE,

  /**
   *  The christening date.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_CHRISTENINGDATE,

  /**
   *  The death date.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_DEATHDATE,

  /**
   *  The burial date.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_BURIALDATE,

  /**
   *  The marriage date.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_MARRIAGEDATE,

  /**
   *  The residence date.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_RESIDENCEDATE,

  /**
   *  The immigration date.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_IMMIGRATIONDATE,

  /**
   *  The emigration date.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_EMIGRATIONDATE,

  /**
   *  The birth place.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_BIRTHPLACE,

  /**
   *  The christening place.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_CHRISTENINGPLACE,

  /**
   *  The death place.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_DEATHPLACE,

  /**
   *  The burial place.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_BURIALPLACE,

  /**
   *  The marriage place.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_MARRIAGEPLACE,

  /**
   *  The residence place.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_RESIDENCEPLACE,

  /**
   *  The immigration place.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_IMMIGRATIONPLACE,

  /**
   *  The emigration place.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_EMIGRATIONPLACE,

  /**
   *  The birth year.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_BIRTHYEAR,

  /**
   *  The christening year.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_CHRISTENINGYEAR,

  /**
   *  The death year.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_DEATHYEAR,

  /**
   *  The burial year.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_BURIALYEAR,

  /**
   *  The marriage year.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_MARRIAGEYEAR,

  /**
   *  The residence year.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_RESIDENCEYEAR,

  /**
   *  The immigration year.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_IMMIGRATIONYEAR,

  /**
   *  The emigration year.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_EMIGRATIONYEAR,

  /**
   *  The birth month.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_BIRTHMONTH,

  /**
   *  The christening month.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_CHRISTENINGMONTH,

  /**
   *  The death month.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_DEATHMONTH,

  /**
   *  The burial month.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_BURIALMONTH,

  /**
   *  The marriage month.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_MARRIAGEMONTH,

  /**
   *  The residence month.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_RESIDENCEMONTH,

  /**
   *  The immigration month.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_IMMIGRATIONMONTH,

  /**
   *  The emigration month.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_EMIGRATIONMONTH,

  /**
   *  The birth day.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_BIRTHDAY,

  /**
   *  The christening day.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_CHRISTENINGDAY,

  /**
   *  The death day.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_DEATHDAY,

  /**
   *  The burial day.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_BURIALDAY,

  /**
   *  The marriage day.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_MARRIAGEDAY,

  /**
   *  The residence day.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_RESIDENCEDAY,

  /**
   *  The immigration day.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_IMMIGRATIONDAY,

  /**
   *  The emigration day.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERFIELD_EMIGRATIONDAY
};

/**
 * Reads a SearchMatchParameterField from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The SearchMatchParameterField, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2SearchMatchParameterField *xmlTextReaderReadFSFAMILYTREEV2SearchMatchParameterFieldType(xmlTextReaderPtr reader);

/**
 * Writes a SearchMatchParameterField to XML.
 *
 * @param writer The XML writer.
 * @param _searchMatchParameterField The SearchMatchParameterField to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2SearchMatchParameterFieldType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2SearchMatchParameterField *_searchMatchParameterField);

/**
 *  The relationship type of a search parameter.

 @author Ryan Heaton

 */
enum FSFAMILYTREEV2SearchMatchParameterRelationship
{

  /**
   *  Specifies that the search parameter applies to the primary person.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERRELATIONSHIP_SELF,

  /**
   *  Specifies that the search parameter applies to a father of the primary person.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERRELATIONSHIP_FATHER,

  /**
   *  Specifies that the search parameter applies to a mother of the primary person.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERRELATIONSHIP_MOTHER,

  /**
   *  Specifies that the search parameter applies to a spouse of the primary person.

   */
  FAMILYTREE_FAMILYTREE_V2_SEARCHMATCHPARAMETERRELATIONSHIP_SPOUSE
};

/**
 * Reads a SearchMatchParameterRelationship from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The SearchMatchParameterRelationship, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2SearchMatchParameterRelationship *xmlTextReaderReadFSFAMILYTREEV2SearchMatchParameterRelationshipType(xmlTextReaderPtr reader);

/**
 * Writes a SearchMatchParameterRelationship to XML.
 *
 * @param writer The XML writer.
 * @param _searchMatchParameterRelationship The SearchMatchParameterRelationship to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2SearchMatchParameterRelationshipType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2SearchMatchParameterRelationship *_searchMatchParameterRelationship);

/**
 *  Repository Type

 @author Rob Lyon

 */
enum FSFAMILYTREEV2RepositoryType
{

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_REPOSITORYTYPE_ARCHIVE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_REPOSITORYTYPE_CHURCH,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_REPOSITORYTYPE_INDIVIDUAL,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_REPOSITORYTYPE_GOVERNMENT,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_REPOSITORYTYPE_LIBRARY,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_REPOSITORYTYPE_NEWSPAPER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_REPOSITORYTYPE_SCHOOL
};

/**
 * Reads a RepositoryType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The RepositoryType, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2RepositoryType *xmlTextReaderReadFSFAMILYTREEV2RepositoryTypeType(xmlTextReaderPtr reader);

/**
 * Writes a RepositoryType to XML.
 *
 * @param writer The XML writer.
 * @param _repositoryType The RepositoryType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2RepositoryTypeType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2RepositoryType *_repositoryType);

/**
 *  The gender types.

 @author Ryan Heaton

 */
enum FSFAMILYTREEV2GenderType
{

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_GENDERTYPE_MALE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_GENDERTYPE_FEMALE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_GENDERTYPE_UNKNOWN
};

/**
 * Reads a GenderType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The GenderType, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2GenderType *xmlTextReaderReadFSFAMILYTREEV2GenderTypeType(xmlTextReaderPtr reader);

/**
 * Writes a GenderType to XML.
 *
 * @param writer The XML writer.
 * @param _genderType The GenderType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2GenderTypeType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2GenderType *_genderType);

/**
 *  A parent-child lineage type.

 @author Ryan Heaton

 */
enum FSFAMILYTREEV2LineageType
{

  /**
   *  Biological parent-child relationship.

   */
  FAMILYTREE_FAMILYTREE_V2_LINEAGETYPE_BIOLOGICAL,

  /**
   *  Adoptive parent-child relationship.

   */
  FAMILYTREE_FAMILYTREE_V2_LINEAGETYPE_ADOPTIVE,

  /**
   *  Foster parent-child relationship.

   */
  FAMILYTREE_FAMILYTREE_V2_LINEAGETYPE_FOSTER,

  /**
   *  Guardianship parent-child relationship.

   */
  FAMILYTREE_FAMILYTREE_V2_LINEAGETYPE_GUARDIANSHIP,

  /**
   *  Step parent-child relationship.

   */
  FAMILYTREE_FAMILYTREE_V2_LINEAGETYPE_STEP,

  /**
   *  User-defined lineage type.

   */
  FAMILYTREE_FAMILYTREE_V2_LINEAGETYPE_OTHER
};

/**
 * Reads a LineageType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The LineageType, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2LineageType *xmlTextReaderReadFSFAMILYTREEV2LineageTypeType(xmlTextReaderPtr reader);

/**
 * Writes a LineageType to XML.
 *
 * @param writer The XML writer.
 * @param _lineageType The LineageType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2LineageTypeType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2LineageType *_lineageType);

/**
 *  Media Type

 @author Rob Lyon

 */
enum FSFAMILYTREEV2MediaType
{

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_ARTICLE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_AUDIO,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_BOOK,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_CASSETTE_TAPE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_COMPACT_DISC,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_DVD,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_EMAIL,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_EIGHT_MM,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_ELECTRONIC_DOCUMENT,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_GAZETTEER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_INTERNET,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_MAGAZINE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_MANUSCRIPT,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_MAP,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_MEMORABILIA,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_MICROFILM,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_MICROFICHE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_NEWSPAPER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_PERIODICAL,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_PHOTOGRAPH,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_PAPER,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_REEL_TO_REEL,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_VHS,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_VIDEO,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_WEBSITE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_WRITTEN_CORRESPONDENCE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MEDIATYPE_OTHER
};

/**
 * Reads a MediaType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The MediaType, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2MediaType *xmlTextReaderReadFSFAMILYTREEV2MediaTypeType(xmlTextReaderPtr reader);

/**
 * Writes a MediaType to XML.
 *
 * @param writer The XML writer.
 * @param _mediaType The MediaType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2MediaTypeType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2MediaType *_mediaType);

/**
 *  Type of person id.
 
 @author Ryan Heaton

 */
enum FSFAMILYTREEV2PersonIdType
{

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_PERSONIDTYPE_AFN,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_PERSONIDTYPE_GEDCOM
};

/**
 * Reads a PersonIdType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The PersonIdType, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2PersonIdType *xmlTextReaderReadFSFAMILYTREEV2PersonIdTypeType(xmlTextReaderPtr reader);

/**
 * Writes a PersonIdType to XML.
 *
 * @param writer The XML writer.
 * @param _personIdType The PersonIdType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2PersonIdTypeType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2PersonIdType *_personIdType);

/**
 *  @author Ryan Heaton

 */
enum FSFAMILYTREEV2OrdinanceType
{

  /**
   *  Baptism.

   */
  FAMILYTREE_FAMILYTREE_V2_ORDINANCETYPE_BORN_IN_COVENANT,

  /**
   *  Baptism.

   */
  FAMILYTREE_FAMILYTREE_V2_ORDINANCETYPE_BAPTISM,

  /**
   *  Confirmation.

   */
  FAMILYTREE_FAMILYTREE_V2_ORDINANCETYPE_CONFIRMATION,

  /**
   *  Initiatory.

   */
  FAMILYTREE_FAMILYTREE_V2_ORDINANCETYPE_INITIATORY,

  /**
   *  Endowment.

   */
  FAMILYTREE_FAMILYTREE_V2_ORDINANCETYPE_ENDOWMENT,

  /**
   *  Sealing to parents.

   */
  FAMILYTREE_FAMILYTREE_V2_ORDINANCETYPE_SEALING_TO_PARENTS,

  /**
   *  Sealing to spouse.

   */
  FAMILYTREE_FAMILYTREE_V2_ORDINANCETYPE_SEALING_TO_SPOUSE
};

/**
 * Reads a OrdinanceType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The OrdinanceType, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2OrdinanceType *xmlTextReaderReadFSFAMILYTREEV2OrdinanceTypeType(xmlTextReaderPtr reader);

/**
 * Writes a OrdinanceType to XML.
 *
 * @param writer The XML writer.
 * @param _ordinanceType The OrdinanceType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2OrdinanceTypeType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2OrdinanceType *_ordinanceType);

/**
 *  @author Ryan Heaton

 */
enum FSFAMILYTREEV2NameType
{

  /**
   *  Also known as.

   */
  FAMILYTREE_FAMILYTREE_V2_NAMETYPE_AKA,

  /**
   *  Also known as.

   */
  FAMILYTREE_FAMILYTREE_V2_NAMETYPE_MARRIED_NAME,

  /**
   *  Birth name.

   */
  FAMILYTREE_FAMILYTREE_V2_NAMETYPE_NAME,

  /**
   *  Nickname

   */
  FAMILYTREE_FAMILYTREE_V2_NAMETYPE_NICKNAME,

  /**
   *  Other

   */
  FAMILYTREE_FAMILYTREE_V2_NAMETYPE_OTHER,

  /**
   *  Phonetic

   */
  FAMILYTREE_FAMILYTREE_V2_NAMETYPE_PHONETIC,

  /**
   *  Unknown

   */
  FAMILYTREE_FAMILYTREE_V2_NAMETYPE_UNKNOWN
};

/**
 * Reads a NameType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The NameType, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2NameType *xmlTextReaderReadFSFAMILYTREEV2NameTypeType(xmlTextReaderPtr reader);

/**
 * Writes a NameType to XML.
 *
 * @param writer The XML writer.
 * @param _nameType The NameType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2NameTypeType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2NameType *_nameType);

/**
 *  Enumeration of name piece types.

 @author Ryan Heaton

 */
enum FSFAMILYTREEV2NamePieceType
{

  /**
   *  Prefix piece.

   */
  FAMILYTREE_FAMILYTREE_V2_NAMEPIECETYPE_PREFIX,

  /**
   *  Suffix piece.

   */
  FAMILYTREE_FAMILYTREE_V2_NAMEPIECETYPE_SUFFIX,

  /**
   *  Given piece.

   */
  FAMILYTREE_FAMILYTREE_V2_NAMEPIECETYPE_GIVEN,

  /**
   *  Family piece.

   */
  FAMILYTREE_FAMILYTREE_V2_NAMEPIECETYPE_FAMILY,

  /**
   *  Other piece.

   */
  FAMILYTREE_FAMILYTREE_V2_NAMEPIECETYPE_OTHER
};

/**
 * Reads a NamePieceType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The NamePieceType, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2NamePieceType *xmlTextReaderReadFSFAMILYTREEV2NamePieceTypeType(xmlTextReaderPtr reader);

/**
 * Writes a NamePieceType to XML.
 *
 * @param writer The XML writer.
 * @param _namePieceType The NamePieceType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2NamePieceTypeType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2NamePieceType *_namePieceType);

/**
 *  @author Ryan Heaton

 */
enum FSFAMILYTREEV2NameFormScript
{

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_NAMEFORMSCRIPT_SPANISH,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_NAMEFORMSCRIPT_PORTUGUESE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_NAMEFORMSCRIPT_CHINESE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_NAMEFORMSCRIPT_KANA,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_NAMEFORMSCRIPT_HANGUL,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_NAMEFORMSCRIPT_CYRILLIC
};

/**
 * Reads a NameFormScript from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The NameFormScript, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2NameFormScript *xmlTextReaderReadFSFAMILYTREEV2NameFormScriptType(xmlTextReaderPtr reader);

/**
 * Writes a NameFormScript to XML.
 *
 * @param writer The XML writer.
 * @param _nameFormScript The NameFormScript to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2NameFormScriptType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2NameFormScript *_nameFormScript);

/**
 *  The confidence level of a match.

 @author Ryan Heaton

 */
enum FSFAMILYTREEV2MatchConfidence
{

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MATCHCONFIDENCE_HIGH,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MATCHCONFIDENCE_MEDIUM,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_MATCHCONFIDENCE_LOW
};

/**
 * Reads a MatchConfidence from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The MatchConfidence, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2MatchConfidence *xmlTextReaderReadFSFAMILYTREEV2MatchConfidenceType(xmlTextReaderPtr reader);

/**
 * Writes a MatchConfidence to XML.
 *
 * @param writer The XML writer.
 * @param _matchConfidence The MatchConfidence to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2MatchConfidenceType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2MatchConfidence *_matchConfidence);

/**
 *  Combine and separate actions.

 @author Ryan Heaton

 */
enum FSFAMILYTREEV2CombineSeparateAction
{

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_COMBINESEPARATEACTION_SEPARATE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_COMBINESEPARATEACTION_MOVE
};

/**
 * Reads a CombineSeparateAction from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The CombineSeparateAction, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2CombineSeparateAction *xmlTextReaderReadFSFAMILYTREEV2CombineSeparateActionType(xmlTextReaderPtr reader);

/**
 * Writes a CombineSeparateAction to XML.
 *
 * @param writer The XML writer.
 * @param _combineSeparateAction The CombineSeparateAction to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2CombineSeparateActionType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2CombineSeparateAction *_combineSeparateAction);

/**
 *  Citation Type

 @author Rob Lyon

 */
enum FSFAMILYTREEV2CitationType
{

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONTYPE_ARTIFACT,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONTYPE_INTERVIEW,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONTYPE_IN_MY_POSSESSION,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONTYPE_LECTURE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONTYPE_POSSESSION_OF_SOMEONE_ELSE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONTYPE_STANDARD_SOURCE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONTYPE_WORD_OF_MOUTH,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONTYPE_WRITTEN_CORRESPONDENCE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CITATIONTYPE_OTHER
};

/**
 * Reads a CitationType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The CitationType, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2CitationType *xmlTextReaderReadFSFAMILYTREEV2CitationTypeType(xmlTextReaderPtr reader);

/**
 * Writes a CitationType to XML.
 *
 * @param writer The XML writer.
 * @param _citationType The CitationType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2CitationTypeType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2CitationType *_citationType);

/**
 *  Enumeration of characteristic types.

 @author Ryan Heaton

 */
enum FSFAMILYTREEV2CharacteristicType
{

  /**
   *  Caste Name

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_CASTE_NAME,

  /**
   *  Clan Name

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_CLAN_NAME,

  /**
   *  Nation ID

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_NATIONAL_ID,

  /**
   *  National Origin

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_NATIONAL_ORIGIN,

  /**
   *  Nobility Title

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_NOBILITY_TITLE,

  /**
   *  Occupation

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_OCCUPATION,

  /**
   *  Physical Description

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_PHYSICAL_DESCRIPTION,

  /**
   *  Race

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_RACE,

  /**
   *  Religious Affilication

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_RELIGIOUS_AFFILIATION,

  /**
   *  Stillborn

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_STILLBORN,

  /**
   *  Tribe Name

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_TRIBE_NAME,

  /**
   *  Family Univeral ID.

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_GEDCOM_ID,

  /**
   *  Common Law Marriage

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_COMMON_LAW_MARRIAGE,

  /**
   *  Lineage parent-child type.

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_LINEAGE,

  /**
   *  Lineage parent-child type.

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_EXISTS,

  /**
   *  User-defined fact type.

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_OTHER,

  /**
   *  Count of Children.

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_NUMBER_OF_CHILDREN,

  /**
   *  Count of Marriages.

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_NUMBER_OF_MARRIAGES,

  /**
   *  Currently Spouses.

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_CURRENTLY_SPOUSES,

  /**
   *  Died before Eight.

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_DIED_BEFORE_EIGHT,

  /**
   *  Name Sake.

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_NAME_SAKE,

  /**
   *  Never Had Childred.

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_NEVER_HAD_CHILDREN,

  /**
   *  Never Married.

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_NEVER_MARRIED,

  /**
   *  Not Accountable.

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_NOT_ACCOUNTABLE,

  /**
   *  Possessions.

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_POSSESSIONS,

  /**
   *  Residence.

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_RESIDENCE,

  /**
   *  Scholastic Achievement.

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_SCHOLASTIC_ACHIEVEMENT,

  /**
   *  Social Security Number.

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_SOCIAL_SECURITY_NUMBER,

  /**
   *  Twin.

   */
  FAMILYTREE_FAMILYTREE_V2_CHARACTERISTICTYPE_TWIN
};

/**
 * Reads a CharacteristicType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The CharacteristicType, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2CharacteristicType *xmlTextReaderReadFSFAMILYTREEV2CharacteristicTypeType(xmlTextReaderPtr reader);

/**
 * Writes a CharacteristicType to XML.
 *
 * @param writer The XML writer.
 * @param _characteristicType The CharacteristicType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2CharacteristicTypeType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2CharacteristicType *_characteristicType);

/**
 *  Change Type

 @author Rob Lyon

 */
enum FSFAMILYTREEV2ChangeType
{

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CHANGETYPE_COMBINE,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_CHANGETYPE_SEPARATE
};

/**
 * Reads a ChangeType from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The ChangeType, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2ChangeType *xmlTextReaderReadFSFAMILYTREEV2ChangeTypeType(xmlTextReaderPtr reader);

/**
 * Writes a ChangeType to XML.
 *
 * @param writer The XML writer.
 * @param _changeType The ChangeType to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2ChangeTypeType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2ChangeType *_changeType);

/**
 *  Assertion Disposition

 @author Rob Lyon

 */
enum FSFAMILYTREEV2AssertionDisposition
{

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_ASSERTIONDISPOSITION_AFFIRMING,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_ASSERTIONDISPOSITION_DISPUTING,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_ASSERTIONDISPOSITION_AFFIRMING_DISPUTING
};

/**
 * Reads a AssertionDisposition from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The AssertionDisposition, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2AssertionDisposition *xmlTextReaderReadFSFAMILYTREEV2AssertionDispositionType(xmlTextReaderPtr reader);

/**
 * Writes a AssertionDisposition to XML.
 *
 * @param writer The XML writer.
 * @param _assertionDisposition The AssertionDisposition to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2AssertionDispositionType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2AssertionDisposition *_assertionDisposition);

/**
 *  Assertion update actions.

 @author Ryan Heaton

 */
enum FSFAMILYTREEV2AssertionAction
{

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_ASSERTIONACTION_SELECT,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FAMILYTREE_V2_ASSERTIONACTION_DELETE
};

/**
 * Reads a AssertionAction from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The AssertionAction, or NULL if unable to be read.
 */
static enum FSFAMILYTREEV2AssertionAction *xmlTextReaderReadFSFAMILYTREEV2AssertionActionType(xmlTextReaderPtr reader);

/**
 * Writes a AssertionAction to XML.
 *
 * @param writer The XML writer.
 * @param _assertionAction The AssertionAction to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSFAMILYTREEV2AssertionActionType(xmlTextWriterPtr writer, enum FSFAMILYTREEV2AssertionAction *_assertionAction);

/**
 * (no documentation provided)
 */
enum FSV1ErrorLevel
{

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FSAPI_V1_ERRORLEVEL_INFO,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FSAPI_V1_ERRORLEVEL_WARN,

  /**
   * (no documentation provided)
   */
  FAMILYTREE_FSAPI_V1_ERRORLEVEL_ERROR
};

/**
 * Reads a ErrorLevel from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The ErrorLevel, or NULL if unable to be read.
 */
static enum FSV1ErrorLevel *xmlTextReaderReadFSV1ErrorLevelType(xmlTextReaderPtr reader);

/**
 * Writes a ErrorLevel to XML.
 *
 * @param writer The XML writer.
 * @param _errorLevel The ErrorLevel to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWriteFSV1ErrorLevelType(xmlTextWriterPtr writer, enum FSV1ErrorLevel *_errorLevel);

@class FSFAMILYTREEV2AssertionValue;
@class FSFAMILYTREEV2ChangeAction;
@class FSFAMILYTREEV2Changes;
@class FSFAMILYTREEV2CitationField;
@class FSFAMILYTREEV2Contact;
@class FSFAMILYTREEV2EntityReference;
@class FSFAMILYTREEV2DateAstro;
@class FSFAMILYTREEV2FamilyReference;
@class FSFAMILYTREEV2GenDate;
@class FSFAMILYTREEV2ContributorAlias;
@class FSFAMILYTREEV2NameForm;
@class FSFAMILYTREEV2NamePiece;
@class FSFAMILYTREEV2Note;
@class FSFAMILYTREEV2Pedigree;
@class FSFAMILYTREEV2PersonIdentifier;
@class FSFAMILYTREEV2PersonProperties;
@class FSFAMILYTREEV2Place;
@class FSFAMILYTREEV2Relationship;
@class FSFAMILYTREEV2Repository;
@class FSFAMILYTREEV2SearchMatchParameters;
@class FSFAMILYTREEV2Source;
@class FSFAMILYTREEV2SourceField;
@class FSFAMILYTREEV2UserPreference;
@class FSFAMILYTREEV2ValueSelection;
@class FSFAMILYTREEV2SearchResults;
@class FSFAMILYTREEV2SearchResult;
@class FSFAMILYTREEV2SearchMatchParameter;
@class FSFAMILYTREEV2RelationshipProperties;
@class FSFAMILYTREEV2RelationshipAssertions;
@class FSFAMILYTREEV2ProxyRole;
@class FSFAMILYTREEV2Proxy;
@class FSFAMILYTREEV2PostalAddress;
@class FSFAMILYTREEV2PersonRelationships;
@class FSFAMILYTREEV2PersonPersonas;
@class FSFAMILYTREEV2PersonIdentifiers;
@class FSFAMILYTREEV2PersonAssertions;
@class FSFAMILYTREEV2Person;
@class FSFAMILYTREEV2ParentsReference;
@class FSFAMILYTREEV2NormalizedPlace;
@class FSFAMILYTREEV2MatchResults;
@class FSFAMILYTREEV2Citation;
@class FSFAMILYTREEV2Change;
@class FSFAMILYTREEV2Assertion;
@class FSFAMILYTREEV2User;
@class FSFAMILYTREEV2SearchPerson;
@class FSFAMILYTREEV2ExistsAssertion;
@class FSFAMILYTREEV2ExistsValue;
@class FSFAMILYTREEV2PersonaReference;
@class FSFAMILYTREEV2PersonReference;
@class FSFAMILYTREEV2PersonPersona;
@class FSFAMILYTREEV2OrdinanceAssertion;
@class FSFAMILYTREEV2OrdinanceValue;
@class FSFAMILYTREEV2NameValue;
@class FSFAMILYTREEV2NameAssertion;
@class FSFAMILYTREEV2MatchResult;
@class FSFAMILYTREEV2GenderValue;
@class FSFAMILYTREEV2GenderAssertion;
@class FSFAMILYTREEV2EventValue;
@class FSFAMILYTREEV2EventAssertion;
@class FSFAMILYTREEV2ContributorReference;
@class FSFAMILYTREEV2Contributor;
@class FSFAMILYTREEV2CharacteristicValue;
@class FSFAMILYTREEV2CharacteristicAssertion;
@class FSV1BasicProperty;
@class FSV1BasicError;
@class FSV1BasicElement;
@class FSFAMILYTREEV2FamilyTreeStatus;
@class FSFAMILYTREEV1FamilyTree;
@class FSFAMILYTREEV2FamilyTreeProperty;
@class FSFAMILYTREEV2FamilyTree;


/**
 *  An assertion value.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2AssertionValue : NSObject
{
  @private
    NSString *_id;
    NSString *_title;
}

/**
 * the id of the value.
 */
- (NSString *) id;

/**
 * the id of the value.
 */
- (void) setId: (NSString *) newId;

/**
 * The title of the type in the case of user-defined characteristics.
 */
- (NSString *) title;

/**
 * The title of the type in the case of user-defined characteristics.
 */
- (void) setTitle: (NSString *) newTitle;
@end /* interface FSFAMILYTREEV2AssertionValue */

/**
 *  @author Rob Lyon

 */
@interface FSFAMILYTREEV2ChangeAction : NSObject
{
  @private
    enum FSFAMILYTREEV2ChangeActionType *_type;
    NSString *_value;
}

/**
 * the change action type.
 */
- (enum FSFAMILYTREEV2ChangeActionType *) type;

/**
 * the change action type.
 */
- (void) setType: (enum FSFAMILYTREEV2ChangeActionType *) newType;

/**
 * the action value.
 */
- (NSString *) value;

/**
 * the action value.
 */
- (void) setValue: (NSString *) newValue;
@end /* interface FSFAMILYTREEV2ChangeAction */

/**
 *  @author Rob Lyon

 */
@interface FSFAMILYTREEV2Changes : NSObject
{
  @private
    int _count;
    NSArray *_changeList;
}

/**
 * The count of changes.
 */
- (int) count;

/**
 * The count of changes.
 */
- (void) setCount: (int) newCount;

/**
 * The changes.
 */
- (NSArray *) changeList;

/**
 * The changes.
 */
- (void) setChangeList: (NSArray *) newChangeList;
@end /* interface FSFAMILYTREEV2Changes */

/**
 *  Citation Field

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2CitationField : NSObject
{
  @private
    enum FSFAMILYTREEV2CitationFieldType *_type;
    NSString *_value;
}

/**
 * (no documentation provided)
 */
- (enum FSFAMILYTREEV2CitationFieldType *) type;

/**
 * (no documentation provided)
 */
- (void) setType: (enum FSFAMILYTREEV2CitationFieldType *) newType;

/**
 * (no documentation provided)
 */
- (NSString *) value;

/**
 * (no documentation provided)
 */
- (void) setValue: (NSString *) newValue;
@end /* interface FSFAMILYTREEV2CitationField */

/**
 *  A contributor of information to new FamilySearch.

 @author Ryan Heaton

 */
@interface FSFAMILYTREEV2Contact : NSObject
{
  @private
    NSString *_id;
    NSString *_contactName;
    NSString *_fullName;
    NSString *_email;
    FSFAMILYTREEV2PostalAddress *_address;
    NSString *_phone;
}

/**
 * The id of the contributor.
 */
- (NSString *) id;

/**
 * The id of the contributor.
 */
- (void) setId: (NSString *) newId;

/**
 * The contact name of the user.
 */
- (NSString *) contactName;

/**
 * The contact name of the user.
 */
- (void) setContactName: (NSString *) newContactName;

/**
 * The full name of the user.
 */
- (NSString *) fullName;

/**
 * The full name of the user.
 */
- (void) setFullName: (NSString *) newFullName;

/**
 * The email of the user.
 */
- (NSString *) email;

/**
 * The email of the user.
 */
- (void) setEmail: (NSString *) newEmail;

/**
 * The address number of the user.
 */
- (FSFAMILYTREEV2PostalAddress *) address;

/**
 * The address number of the user.
 */
- (void) setAddress: (FSFAMILYTREEV2PostalAddress *) newAddress;

/**
 * The phone number of the user.
 */
- (NSString *) phone;

/**
 * The phone number of the user.
 */
- (void) setPhone: (NSString *) newPhone;
@end /* interface FSFAMILYTREEV2Contact */

/**
 *  A Family Tree entity reference.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2EntityReference : NSObject
{
  @private
    NSString *_id;
    NSString *_tempId;
    NSString *_version;
}

/**
 * The ref id of the persona.
 */
- (NSString *) id;

/**
 * The ref id of the persona.
 */
- (void) setId: (NSString *) newId;

/**
 * Temp id for this entity reference.
 */
- (NSString *) tempId;

/**
 * Temp id for this entity reference.
 */
- (void) setTempId: (NSString *) newTempId;

/**
 * The version number for this person.
 */
- (NSString *) version;

/**
 * The version number for this person.
 */
- (void) setVersion: (NSString *) newVersion;
@end /* interface FSFAMILYTREEV2EntityReference */

/**
 *  An astro date.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2DateAstro : NSObject
{
  @private
    NSString *_earliest;
    NSString *_latest;
}

/**
 * The earliest astro date.
 */
- (NSString *) earliest;

/**
 * The earliest astro date.
 */
- (void) setEarliest: (NSString *) newEarliest;

/**
 * The lastest astro date.
 */
- (NSString *) latest;

/**
 * The lastest astro date.
 */
- (void) setLatest: (NSString *) newLatest;
@end /* interface FSFAMILYTREEV2DateAstro */

/**
 *  A FamilyTree family.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2FamilyReference : NSObject
{
  @private
    enum FSFAMILYTREEV2AssertionAction *_action;
    NSArray *_parents;
    FSFAMILYTREEV2EventAssertion *_marriage;
    NSArray *_children;
}

/**
 * The action.
 */
- (enum FSFAMILYTREEV2AssertionAction *) action;

/**
 * The action.
 */
- (void) setAction: (enum FSFAMILYTREEV2AssertionAction *) newAction;

/**
 * A collection of parents for this family.
 */
- (NSArray *) parents;

/**
 * A collection of parents for this family.
 */
- (void) setParents: (NSArray *) newParents;

/**
 * the primary affirming marriage-like event for the couple, if exists.
 */
- (FSFAMILYTREEV2EventAssertion *) marriage;

/**
 * the primary affirming marriage-like event for the couple, if exists.
 */
- (void) setMarriage: (FSFAMILYTREEV2EventAssertion *) newMarriage;

/**
 * A collection of children for this family.
 */
- (NSArray *) children;

/**
 * A collection of children for this family.
 */
- (void) setChildren: (NSArray *) newChildren;
@end /* interface FSFAMILYTREEV2FamilyReference */

/**
 *  A standardized date.

 @author Ryan Heaton

 */
@interface FSFAMILYTREEV2GenDate : NSObject
{
  @private
    NSString *_original;
    NSString *_normalized;
    FSFAMILYTREEV2DateAstro *_astro;
    BOOL *_selected;
}

/**
 * The date value.
 */
- (NSString *) original;

/**
 * The date value.
 */
- (void) setOriginal: (NSString *) newOriginal;

/**
 * The normalized value.
 */
- (NSString *) normalized;

/**
 * The normalized value.
 */
- (void) setNormalized: (NSString *) newNormalized;

/**
 * The astro date.
 */
- (FSFAMILYTREEV2DateAstro *) astro;

/**
 * The astro date.
 */
- (void) setAstro: (FSFAMILYTREEV2DateAstro *) newAstro;

/**
 * true, if the normalization is user selected.
 */
- (BOOL *) selected;

/**
 * true, if the normalization is user selected.
 */
- (void) setSelected: (BOOL *) newSelected;
@end /* interface FSFAMILYTREEV2GenDate */

/**
 *  @author Ryan Heaton

 */
@interface FSFAMILYTREEV2ContributorAlias : NSObject
{
  @private
    NSString *_id;
}

/**
 * The alias id.
 */
- (NSString *) id;

/**
 * The alias id.
 */
- (void) setId: (NSString *) newId;
@end /* interface FSFAMILYTREEV2ContributorAlias */

/**
 *  A name form.

 @author Ryan Heaton

 */
@interface FSFAMILYTREEV2NameForm : NSObject
{
  @private
    NSString *_fullText;
    NSArray *_pieces;
    enum FSFAMILYTREEV2NameFormScript *_script;
    BOOL *_selected;
}

/**
 * The normalized full text of the name.
 */
- (NSString *) fullText;

/**
 * The normalized full text of the name.
 */
- (void) setFullText: (NSString *) newFullText;

/**
 * The name pieces.
 */
- (NSArray *) pieces;

/**
 * The name pieces.
 */
- (void) setPieces: (NSArray *) newPieces;

/**
 * The name form script.
 */
- (enum FSFAMILYTREEV2NameFormScript *) script;

/**
 * The name form script.
 */
- (void) setScript: (enum FSFAMILYTREEV2NameFormScript *) newScript;

/**
 * true, if the segmentation is user selected.
 */
- (BOOL *) selected;

/**
 * true, if the segmentation is user selected.
 */
- (void) setSelected: (BOOL *) newSelected;
@end /* interface FSFAMILYTREEV2NameForm */

/**
 *  A piece of a name.

 @author Ryan Heaton

 */
@interface FSFAMILYTREEV2NamePiece : NSObject
{
  @private
    enum FSFAMILYTREEV2NamePieceType *_type;
    NSString *_predelimiters;
    NSString *_value;
    NSString *_postdelimiters;
}

/**
 * The type of the name piece.
 */
- (enum FSFAMILYTREEV2NamePieceType *) type;

/**
 * The type of the name piece.
 */
- (void) setType: (enum FSFAMILYTREEV2NamePieceType *) newType;

/**
 * The predelimiters.
 */
- (NSString *) predelimiters;

/**
 * The predelimiters.
 */
- (void) setPredelimiters: (NSString *) newPredelimiters;

/**
 * The value of the name piece.
 */
- (NSString *) value;

/**
 * The value of the name piece.
 */
- (void) setValue: (NSString *) newValue;

/**
 * The postdelimiters.
 */
- (NSString *) postdelimiters;

/**
 * The postdelimiters.
 */
- (void) setPostdelimiters: (NSString *) newPostdelimiters;
@end /* interface FSFAMILYTREEV2NamePiece */

/**
 *  @author Ryan Heaton

 */
@interface FSFAMILYTREEV2Note : NSObject
{
  @private
    NSString *_id;
    enum FSFAMILYTREEV2AssertionAction *_action;
    NSString *_tempId;
    FSFAMILYTREEV2EntityReference *_person;
    NSArray *_parents;
    NSArray *_spouses;
    FSFAMILYTREEV2EntityReference *_child;
    FSFAMILYTREEV2EntityReference *_assertion;
    FSFAMILYTREEV2EntityReference *_contributor;
    FSFAMILYTREEV2EntityReference *_submitter;
    enum FSFAMILYTREEV2AssertionDisposition *_disposition;
    NSString *_text;
}

/**
 * The id of the note.
 */
- (NSString *) id;

/**
 * The id of the note.
 */
- (void) setId: (NSString *) newId;

/**
 * The action.
 */
- (enum FSFAMILYTREEV2AssertionAction *) action;

/**
 * The action.
 */
- (void) setAction: (enum FSFAMILYTREEV2AssertionAction *) newAction;

/**
 * A temporary id for this note (e.g. for a note not persisted yet).
 */
- (NSString *) tempId;

/**
 * A temporary id for this note (e.g. for a note not persisted yet).
 */
- (void) setTempId: (NSString *) newTempId;

/**
 * The persona id for this note
 */
- (FSFAMILYTREEV2EntityReference *) person;

/**
 * The persona id for this note
 */
- (void) setPerson: (FSFAMILYTREEV2EntityReference *) newPerson;

/**
 * The parent id(s) for this note
 */
- (NSArray *) parents;

/**
 * The parent id(s) for this note
 */
- (void) setParents: (NSArray *) newParents;

/**
 * The spouse id(s) for this note
 */
- (NSArray *) spouses;

/**
 * The spouse id(s) for this note
 */
- (void) setSpouses: (NSArray *) newSpouses;

/**
 * The child id for this note
 */
- (FSFAMILYTREEV2EntityReference *) child;

/**
 * The child id for this note
 */
- (void) setChild: (FSFAMILYTREEV2EntityReference *) newChild;

/**
 * assertionId
 */
- (FSFAMILYTREEV2EntityReference *) assertion;

/**
 * assertionId
 */
- (void) setAssertion: (FSFAMILYTREEV2EntityReference *) newAssertion;

/**
 * a reference to the contributor of the change.
 */
- (FSFAMILYTREEV2EntityReference *) contributor;

/**
 * a reference to the contributor of the change.
 */
- (void) setContributor: (FSFAMILYTREEV2EntityReference *) newContributor;

/**
 * a reference to the submitter.
 */
- (FSFAMILYTREEV2EntityReference *) submitter;

/**
 * a reference to the submitter.
 */
- (void) setSubmitter: (FSFAMILYTREEV2EntityReference *) newSubmitter;

/**
 * the assertion assertion.
 */
- (enum FSFAMILYTREEV2AssertionDisposition *) disposition;

/**
 * the assertion assertion.
 */
- (void) setDisposition: (enum FSFAMILYTREEV2AssertionDisposition *) newDisposition;

/**
 * The text of the note.
 */
- (NSString *) text;

/**
 * The text of the note.
 */
- (void) setText: (NSString *) newText;
@end /* interface FSFAMILYTREEV2Note */

/**
 *  A Family Tree person.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2Pedigree : NSObject
{
  @private
    NSString *_id;
    NSString *_requestedId;
    NSArray *_persons;
}

/**
 * The id of the person.
 */
- (NSString *) id;

/**
 * The id of the person.
 */
- (void) setId: (NSString *) newId;

/**
 * The id of the person.
 */
- (NSString *) requestedId;

/**
 * The id of the person.
 */
- (void) setRequestedId: (NSString *) newRequestedId;

/**
 * The persons.
 */
- (NSArray *) persons;

/**
 * The persons.
 */
- (void) setPersons: (NSArray *) newPersons;
@end /* interface FSFAMILYTREEV2Pedigree */

/**
 *  A person id.

 @author Ryan Heaton

 */
@interface FSFAMILYTREEV2PersonIdentifier : NSObject
{
  @private
    enum FSFAMILYTREEV2PersonIdType *_type;
    NSString *_value;
}

/**
 * The type.
 */
- (enum FSFAMILYTREEV2PersonIdType *) type;

/**
 * The type.
 */
- (void) setType: (enum FSFAMILYTREEV2PersonIdType *) newType;

/**
 * The value of the id.
 */
- (NSString *) value;

/**
 * The value of the id.
 */
- (void) setValue: (NSString *) newValue;
@end /* interface FSFAMILYTREEV2PersonIdentifier */

/**
 *  A FamilyTree person properties section.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2PersonProperties : NSObject
{
  @private
    BOOL *_living;
    NSDate *_modified;
    BOOL *_modifiable;
    BOOL *_multipleFamiliesAsParent;
    BOOL *_multipleFamiliesAsChild;
}

/**
 * The calculated living status for this person.
 */
- (BOOL *) living;

/**
 * The calculated living status for this person.
 */
- (void) setLiving: (BOOL *) newLiving;

/**
 * The modified timestamp for this person.
 */
- (NSDate *) modified;

/**
 * The modified timestamp for this person.
 */
- (void) setModified: (NSDate *) newModified;

/**
 * Is the person modifiable by the current user?
 */
- (BOOL *) modifiable;

/**
 * Is the person modifiable by the current user?
 */
- (void) setModifiable: (BOOL *) newModifiable;

/**
 * Is the person part of more than one family as the parent?
 */
- (BOOL *) multipleFamiliesAsParent;

/**
 * Is the person part of more than one family as the parent?
 */
- (void) setMultipleFamiliesAsParent: (BOOL *) newMultipleFamiliesAsParent;

/**
 * Is the person part of more than one family as the child?
 */
- (BOOL *) multipleFamiliesAsChild;

/**
 * Is the person part of more than one family as the child?
 */
- (void) setMultipleFamiliesAsChild: (BOOL *) newMultipleFamiliesAsChild;
@end /* interface FSFAMILYTREEV2PersonProperties */

/**
 *  A standardized place.

 @author Ryan Heaton

 */
@interface FSFAMILYTREEV2Place : NSObject
{
  @private
    NSString *_original;
    FSFAMILYTREEV2NormalizedPlace *_normalized;
    BOOL *_selected;
}

/**
 * The place value.
 */
- (NSString *) original;

/**
 * The place value.
 */
- (void) setOriginal: (NSString *) newOriginal;

/**
 * The normalized form of the place.
 */
- (FSFAMILYTREEV2NormalizedPlace *) normalized;

/**
 * The normalized form of the place.
 */
- (void) setNormalized: (FSFAMILYTREEV2NormalizedPlace *) newNormalized;

/**
 * true, if the normalization is user selected.
 */
- (BOOL *) selected;

/**
 * true, if the normalization is user selected.
 */
- (void) setSelected: (BOOL *) newSelected;
@end /* interface FSFAMILYTREEV2Place */

/**
 *  A Family Tree relationship.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2Relationship : NSObject
{
  @private
    NSString *_id;
    NSString *_requestedId;
    NSString *_personId;
    NSString *_tempId;
    NSString *_version;
    FSFAMILYTREEV2RelationshipProperties *_properties;
    FSFAMILYTREEV2RelationshipAssertions *_assertions;
    NSArray *_personas;
}

/**
 * The id of the person.
 */
- (NSString *) id;

/**
 * The id of the person.
 */
- (void) setId: (NSString *) newId;

/**
 * The id of the person.
 */
- (NSString *) requestedId;

/**
 * The id of the person.
 */
- (void) setRequestedId: (NSString *) newRequestedId;

/**
 * In the case of a persona, the id of the person of which this is a persona.
 */
- (NSString *) personId;

/**
 * In the case of a persona, the id of the person of which this is a persona.
 */
- (void) setPersonId: (NSString *) newPersonId;

/**
 * A temporary id for this person (e.g. for a person not persisted yet).
 */
- (NSString *) tempId;

/**
 * A temporary id for this person (e.g. for a person not persisted yet).
 */
- (void) setTempId: (NSString *) newTempId;

/**
 * the relationship version.
 */
- (NSString *) version;

/**
 * the relationship version.
 */
- (void) setVersion: (NSString *) newVersion;

/**
 * A collection of properties for this relationship.
 */
- (FSFAMILYTREEV2RelationshipProperties *) properties;

/**
 * A collection of properties for this relationship.
 */
- (void) setProperties: (FSFAMILYTREEV2RelationshipProperties *) newProperties;

/**
 * A collection of assertions for this person.
 */
- (FSFAMILYTREEV2RelationshipAssertions *) assertions;

/**
 * A collection of assertions for this person.
 */
- (void) setAssertions: (FSFAMILYTREEV2RelationshipAssertions *) newAssertions;

/**
 * (no documentation provided)
 */
- (NSArray *) personas;

/**
 * (no documentation provided)
 */
- (void) setPersonas: (NSArray *) newPersonas;
@end /* interface FSFAMILYTREEV2Relationship */

/**
 *  Source Repository

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2Repository : NSObject
{
  @private
    enum FSFAMILYTREEV2RepositoryType *_type;
    NSString *_name;
    NSString *_url;
    FSFAMILYTREEV2PostalAddress *_address;
    NSString *_phone;
    NSString *_fax;
    NSString *_comment;
}

/**
 * The repository type.
 */
- (enum FSFAMILYTREEV2RepositoryType *) type;

/**
 * The repository type.
 */
- (void) setType: (enum FSFAMILYTREEV2RepositoryType *) newType;

/**
 * the repository name.
 */
- (NSString *) name;

/**
 * the repository name.
 */
- (void) setName: (NSString *) newName;

/**
 * The repository URL.
 */
- (NSString *) url;

/**
 * The repository URL.
 */
- (void) setUrl: (NSString *) newUrl;

/**
 * The repository address.
 */
- (FSFAMILYTREEV2PostalAddress *) address;

/**
 * The repository address.
 */
- (void) setAddress: (FSFAMILYTREEV2PostalAddress *) newAddress;

/**
 * The repository phone number.
 */
- (NSString *) phone;

/**
 * The repository phone number.
 */
- (void) setPhone: (NSString *) newPhone;

/**
 * The repository fax number.
 */
- (NSString *) fax;

/**
 * The repository fax number.
 */
- (void) setFax: (NSString *) newFax;

/**
 * The repository comment
 */
- (NSString *) comment;

/**
 * The repository comment
 */
- (void) setComment: (NSString *) newComment;
@end /* interface FSFAMILYTREEV2Repository */

/**
 *  User: mullinstw Date: Mar 31, 2009 Time: 12:32:26 PM

 */
@interface FSFAMILYTREEV2SearchMatchParameters : NSObject
{
  @private
    NSArray *_parameters;
}

/**
 * parameters
 */
- (NSArray *) parameters;

/**
 * parameters
 */
- (void) setParameters: (NSArray *) newParameters;
@end /* interface FSFAMILYTREEV2SearchMatchParameters */

/**
 *  Citation Source

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2Source : NSObject
{
  @private
    enum FSFAMILYTREEV2SourceType *_type;
    BOOL *_original;
    enum FSFAMILYTREEV2SourceDetail *_detail;
    enum FSFAMILYTREEV2MediaType *_media;
    FSFAMILYTREEV2Repository *_repository;
    NSArray *_fields;
}

/**
 * source type
 */
- (enum FSFAMILYTREEV2SourceType *) type;

/**
 * source type
 */
- (void) setType: (enum FSFAMILYTREEV2SourceType *) newType;

/**
 * (no documentation provided)
 */
- (BOOL *) original;

/**
 * (no documentation provided)
 */
- (void) setOriginal: (BOOL *) newOriginal;

/**
 * source detail
 */
- (enum FSFAMILYTREEV2SourceDetail *) detail;

/**
 * source detail
 */
- (void) setDetail: (enum FSFAMILYTREEV2SourceDetail *) newDetail;

/**
 * source media type
 */
- (enum FSFAMILYTREEV2MediaType *) media;

/**
 * source media type
 */
- (void) setMedia: (enum FSFAMILYTREEV2MediaType *) newMedia;

/**
 * The source repository.
 */
- (FSFAMILYTREEV2Repository *) repository;

/**
 * The source repository.
 */
- (void) setRepository: (FSFAMILYTREEV2Repository *) newRepository;

/**
 * source fields.
 */
- (NSArray *) fields;

/**
 * source fields.
 */
- (void) setFields: (NSArray *) newFields;
@end /* interface FSFAMILYTREEV2Source */

/**
 *  Source Field

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2SourceField : NSObject
{
  @private
    enum FSFAMILYTREEV2SourceFieldType *_type;
    NSString *_value;
}

/**
 * (no documentation provided)
 */
- (enum FSFAMILYTREEV2SourceFieldType *) type;

/**
 * (no documentation provided)
 */
- (void) setType: (enum FSFAMILYTREEV2SourceFieldType *) newType;

/**
 * (no documentation provided)
 */
- (NSString *) value;

/**
 * (no documentation provided)
 */
- (void) setValue: (NSString *) newValue;
@end /* interface FSFAMILYTREEV2SourceField */

/**
 *  Created by IntelliJ IDEA. User: kuehneds Date: Oct 6, 2008 Time: 4:16:16 PM To change this template use File | Settings | File Templates.

 */
@interface FSFAMILYTREEV2UserPreference : NSObject
{
  @private
    enum FSFAMILYTREEV2UserPreferenceType *_name;
    NSString *_value;
}

/**
 * (no documentation provided)
 */
- (enum FSFAMILYTREEV2UserPreferenceType *) name;

/**
 * (no documentation provided)
 */
- (void) setName: (enum FSFAMILYTREEV2UserPreferenceType *) newName;

/**
 * (no documentation provided)
 */
- (NSString *) value;

/**
 * (no documentation provided)
 */
- (void) setValue: (NSString *) newValue;
@end /* interface FSFAMILYTREEV2UserPreference */

/**
 *  Selected Information (Selectable Summary).

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2ValueSelection : NSObject
{
  @private
    NSDate *_date;
    FSFAMILYTREEV2EntityReference *_contributor;
}

/**
 * The date of the selection.
 */
- (NSDate *) date;

/**
 * The date of the selection.
 */
- (void) setDate: (NSDate *) newDate;

/**
 * The contributor of the selection.
 */
- (FSFAMILYTREEV2EntityReference *) contributor;

/**
 * The contributor of the selection.
 */
- (void) setContributor: (FSFAMILYTREEV2EntityReference *) newContributor;
@end /* interface FSFAMILYTREEV2ValueSelection */

/**
 *  The results of a search.

 @author Ryan Heaton

 */
@interface FSFAMILYTREEV2SearchResults : NSObject
{
  @private
    int _count;
    int _partial;
    int _close;
    NSArray *_results;
    NSString *_contextId;
    FSFAMILYTREEV2SearchMatchParameters *_query;
}

/**
 * The number of returned hits.
 */
- (int) count;

/**
 * The number of returned hits.
 */
- (void) setCount: (int) newCount;

/**
 * The estimated number of partial hits.
 */
- (int) partial;

/**
 * The estimated number of partial hits.
 */
- (void) setPartial: (int) newPartial;

/**
 * The total number of close hits.
 */
- (int) close;

/**
 * The total number of close hits.
 */
- (void) setClose: (int) newClose;

/**
 * The results in the search.
 */
- (NSArray *) results;

/**
 * The results in the search.
 */
- (void) setResults: (NSArray *) newResults;

/**
 * The context id for repeating the search.
 */
- (NSString *) contextId;

/**
 * The context id for repeating the search.
 */
- (void) setContextId: (NSString *) newContextId;

/**
 * query parameters
 */
- (FSFAMILYTREEV2SearchMatchParameters *) query;

/**
 * query parameters
 */
- (void) setQuery: (FSFAMILYTREEV2SearchMatchParameters *) newQuery;
@end /* interface FSFAMILYTREEV2SearchResults */

/**
 *  @author Rob Lyon

 */
@interface FSFAMILYTREEV2SearchResult : NSObject
{
  @private
    NSString *_id;
    float _score;
    FSFAMILYTREEV2SearchPerson *_person;
    NSArray *_parents;
    NSArray *_spouses;
    NSArray *_children;
}

/**
 * The id of the primary person.
 */
- (NSString *) id;

/**
 * The id of the primary person.
 */
- (void) setId: (NSString *) newId;

/**
 * The search score for this person.
 */
- (float) score;

/**
 * The search score for this person.
 */
- (void) setScore: (float) newScore;

/**
 * The primary person in this search hit.
 */
- (FSFAMILYTREEV2SearchPerson *) person;

/**
 * The primary person in this search hit.
 */
- (void) setPerson: (FSFAMILYTREEV2SearchPerson *) newPerson;

/**
 * The parents of the primary person for this search hit.
 */
- (NSArray *) parents;

/**
 * The parents of the primary person for this search hit.
 */
- (void) setParents: (NSArray *) newParents;

/**
 * The spouses of the primary person for this search hit.
 */
- (NSArray *) spouses;

/**
 * The spouses of the primary person for this search hit.
 */
- (void) setSpouses: (NSArray *) newSpouses;

/**
 * The children of the primary person for this search hit.
 */
- (NSArray *) children;

/**
 * The children of the primary person for this search hit.
 */
- (void) setChildren: (NSArray *) newChildren;
@end /* interface FSFAMILYTREEV2SearchResult */

/**
 *  A search parameter.

 @author Ryan Heaton

 */
@interface FSFAMILYTREEV2SearchMatchParameter : NSObject
{
  @private
    enum FSFAMILYTREEV2SearchMatchParameterRelationship *_relationship;
    enum FSFAMILYTREEV2SearchMatchParameterField *_field;
    FSFAMILYTREEV2EntityReference *_authority;
    NSString *_value;
}

/**
 * The relationship to the primary person of the person to which this parameter applies.
 */
- (enum FSFAMILYTREEV2SearchMatchParameterRelationship *) relationship;

/**
 * The relationship to the primary person of the person to which this parameter applies.
 */
- (void) setRelationship: (enum FSFAMILYTREEV2SearchMatchParameterRelationship *) newRelationship;

/**
 * The field to which to apply the value of this parameter.
 */
- (enum FSFAMILYTREEV2SearchMatchParameterField *) field;

/**
 * The field to which to apply the value of this parameter.
 */
- (void) setField: (enum FSFAMILYTREEV2SearchMatchParameterField *) newField;

/**
 * authority id
 */
- (FSFAMILYTREEV2EntityReference *) authority;

/**
 * authority id
 */
- (void) setAuthority: (FSFAMILYTREEV2EntityReference *) newAuthority;

/**
 * The value of the parameter.
 */
- (NSString *) value;

/**
 * The value of the parameter.
 */
- (void) setValue: (NSString *) newValue;
@end /* interface FSFAMILYTREEV2SearchMatchParameter */

/**
 *  A FamilyTree relationship properties section.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2RelationshipProperties : NSObject
{
  @private
    NSDate *_modified;
}

/**
 * The modified timestamp for this person.
 */
- (NSDate *) modified;

/**
 * The modified timestamp for this person.
 */
- (void) setModified: (NSDate *) newModified;
@end /* interface FSFAMILYTREEV2RelationshipProperties */

/**
 *  A FamilyTree relationships asseritons section.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2RelationshipAssertions : NSObject
{
  @private
    NSArray *_exists;
    NSArray *_events;
    NSArray *_characteristics;
    NSArray *_ordinances;
}

/**
 * A collection of exists assertions for this relationship.
 */
- (NSArray *) exists;

/**
 * A collection of exists assertions for this relationship.
 */
- (void) setExists: (NSArray *) newExists;

/**
 * A collection of events for this relationship.
 */
- (NSArray *) events;

/**
 * A collection of events for this relationship.
 */
- (void) setEvents: (NSArray *) newEvents;

/**
 * A collection of characteristics for this relationship.
 */
- (NSArray *) characteristics;

/**
 * A collection of characteristics for this relationship.
 */
- (void) setCharacteristics: (NSArray *) newCharacteristics;

/**
 * A collection of ordinances for this relationship.
 */
- (NSArray *) ordinances;

/**
 * A collection of ordinances for this relationship.
 */
- (void) setOrdinances: (NSArray *) newOrdinances;
@end /* interface FSFAMILYTREEV2RelationshipAssertions */

/**
 *  Not used.

 */
@interface FSFAMILYTREEV2ProxyRole : NSObject
{
  @private
    NSString *_id;
    NSString *_contactName;
    NSString *_systemName;
}

/**
 * Not used.
 */
- (NSString *) id;

/**
 * Not used.
 */
- (void) setId: (NSString *) newId;

/**
 * Not used.
 */
- (NSString *) contactName;

/**
 * Not used.
 */
- (void) setContactName: (NSString *) newContactName;

/**
 * Not used.
 */
- (NSString *) systemName;

/**
 * Not used.
 */
- (void) setSystemName: (NSString *) newSystemName;
@end /* interface FSFAMILYTREEV2ProxyRole */

/**
 *  A proxy for a user.

 @author Ryan Heaton

 */
@interface FSFAMILYTREEV2Proxy : NSObject
{
  @private
    NSString *_id;
    enum FSFAMILYTREEV2AssertionAction *_action;
    NSString *_name;
    NSString *_accessNumber;
    NSString *_birth;
}

/**
 * Id of the user that is being proxied.
 */
- (NSString *) id;

/**
 * Id of the user that is being proxied.
 */
- (void) setId: (NSString *) newId;

/**
 * The update action to perform on the proxy.
 */
- (enum FSFAMILYTREEV2AssertionAction *) action;

/**
 * The update action to perform on the proxy.
 */
- (void) setAction: (enum FSFAMILYTREEV2AssertionAction *) newAction;

/**
 * Name of the user being proxied.
 */
- (NSString *) name;

/**
 * Name of the user being proxied.
 */
- (void) setName: (NSString *) newName;

/**
 * Access number of the user being proxied.
 */
- (NSString *) accessNumber;

/**
 * Access number of the user being proxied.
 */
- (void) setAccessNumber: (NSString *) newAccessNumber;

/**
 * Birth date of the user to be proxied.
 */
- (NSString *) birth;

/**
 * Birth date of the user to be proxied.
 */
- (void) setBirth: (NSString *) newBirth;
@end /* interface FSFAMILYTREEV2Proxy */

/**
 *  A postal address.

 @author Ryan Heaton

 */
@interface FSFAMILYTREEV2PostalAddress : NSObject
{
  @private
    NSString *_address1;
    NSString *_address2;
    NSString *_address3;
    NSString *_address4;
    NSString *_street1;
    NSString *_street2;
    NSString *_street3;
    NSString *_city;
    NSString *_province;
    NSString *_country;
    NSString *_postalcode;
}

/**
 * The first address field for the postal address.
 */
- (NSString *) address1;

/**
 * The first address field for the postal address.
 */
- (void) setAddress1: (NSString *) newAddress1;

/**
 * The second address field for the postal address.
 */
- (NSString *) address2;

/**
 * The second address field for the postal address.
 */
- (void) setAddress2: (NSString *) newAddress2;

/**
 * The third address field for the postal address.
 */
- (NSString *) address3;

/**
 * The third address field for the postal address.
 */
- (void) setAddress3: (NSString *) newAddress3;

/**
 * The fourth address field for the postal address.
 */
- (NSString *) address4;

/**
 * The fourth address field for the postal address.
 */
- (void) setAddress4: (NSString *) newAddress4;

/**
 * The first street field for the postal street.
 */
- (NSString *) street1;

/**
 * The first street field for the postal street.
 */
- (void) setStreet1: (NSString *) newStreet1;

/**
 * The second street field for the postal street.
 */
- (NSString *) street2;

/**
 * The second street field for the postal street.
 */
- (void) setStreet2: (NSString *) newStreet2;

/**
 * The third street field for the postal street.
 */
- (NSString *) street3;

/**
 * The third street field for the postal street.
 */
- (void) setStreet3: (NSString *) newStreet3;

/**
 * The city.
 */
- (NSString *) city;

/**
 * The city.
 */
- (void) setCity: (NSString *) newCity;

/**
 * The province.
 */
- (NSString *) province;

/**
 * The province.
 */
- (void) setProvince: (NSString *) newProvince;

/**
 * The country.
 */
- (NSString *) country;

/**
 * The country.
 */
- (void) setCountry: (NSString *) newCountry;

/**
 * The postal code.
 */
- (NSString *) postalcode;

/**
 * The postal code.
 */
- (void) setPostalcode: (NSString *) newPostalcode;
@end /* interface FSFAMILYTREEV2PostalAddress */

/**
 *  A FamilyTree person relationships section.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2PersonRelationships : NSObject
{
  @private
    NSArray *_parents;
    NSArray *_spouses;
    NSArray *_children;
}

/**
 * A collection of parent relationships for this person.
 */
- (NSArray *) parents;

/**
 * A collection of parent relationships for this person.
 */
- (void) setParents: (NSArray *) newParents;

/**
 * A collection of spouse relationships for this person.
 */
- (NSArray *) spouses;

/**
 * A collection of spouse relationships for this person.
 */
- (void) setSpouses: (NSArray *) newSpouses;

/**
 * A collection of parent relationships for this person.
 */
- (NSArray *) children;

/**
 * A collection of parent relationships for this person.
 */
- (void) setChildren: (NSArray *) newChildren;
@end /* interface FSFAMILYTREEV2PersonRelationships */

/**
 *  A FamilyTree person asseritons section.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2PersonPersonas : NSObject
{
  @private
    enum FSFAMILYTREEV2CombineSeparateAction *_action;
    NSString *_tempId;
    FSFAMILYTREEV2EntityReference *_target;
    NSArray *_personas;
}

/**
 * The action to take on the personas.
 */
- (enum FSFAMILYTREEV2CombineSeparateAction *) action;

/**
 * The action to take on the personas.
 */
- (void) setAction: (enum FSFAMILYTREEV2CombineSeparateAction *) newAction;

/**
 * Temp id for when you're moving records.
 */
- (NSString *) tempId;

/**
 * Temp id for when you're moving records.
 */
- (void) setTempId: (NSString *) newTempId;

/**
 * The target id to use when combining personas to a specific person.
 */
- (FSFAMILYTREEV2EntityReference *) target;

/**
 * The target id to use when combining personas to a specific person.
 */
- (void) setTarget: (FSFAMILYTREEV2EntityReference *) newTarget;

/**
 * A collection of persona references for this person.
 */
- (NSArray *) personas;

/**
 * A collection of persona references for this person.
 */
- (void) setPersonas: (NSArray *) newPersonas;
@end /* interface FSFAMILYTREEV2PersonPersonas */

/**
 *  A FamilyTree person identifiers section.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2PersonIdentifiers : NSObject
{
  @private
    NSArray *_identifiers;
}

/**
 * The list of person identifiers.
 */
- (NSArray *) identifiers;

/**
 * The list of person identifiers.
 */
- (void) setIdentifiers: (NSArray *) newIdentifiers;
@end /* interface FSFAMILYTREEV2PersonIdentifiers */

/**
 *  A FamilyTree person asseritons section.

 @author Rob Lyon
 @author Duane Kuehne

 */
@interface FSFAMILYTREEV2PersonAssertions : NSObject
{
  @private
    NSArray *_exists;
    NSArray *_names;
    NSArray *_genders;
    NSArray *_events;
    NSArray *_characteristics;
    NSArray *_ordinances;
}

/**
 * A collection of exists assertions for this person.
 */
- (NSArray *) exists;

/**
 * A collection of exists assertions for this person.
 */
- (void) setExists: (NSArray *) newExists;

/**
 * A collection of names for this person.
 */
- (NSArray *) names;

/**
 * A collection of names for this person.
 */
- (void) setNames: (NSArray *) newNames;

/**
 * A collection of genders for this person.
 */
- (NSArray *) genders;

/**
 * A collection of genders for this person.
 */
- (void) setGenders: (NSArray *) newGenders;

/**
 * A collection of events for this person.
 */
- (NSArray *) events;

/**
 * A collection of events for this person.
 */
- (void) setEvents: (NSArray *) newEvents;

/**
 * A collection of characteristics for this person.
 */
- (NSArray *) characteristics;

/**
 * A collection of characteristics for this person.
 */
- (void) setCharacteristics: (NSArray *) newCharacteristics;

/**
 * A collection of ordinances for this person.
 */
- (NSArray *) ordinances;

/**
 * A collection of ordinances for this person.
 */
- (void) setOrdinances: (NSArray *) newOrdinances;
@end /* interface FSFAMILYTREEV2PersonAssertions */

/**
 *  A Family Tree person.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2Person : NSObject
{
  @private
    NSString *_requestedId;
    NSString *_version;
    NSString *_id;
    NSString *_personId;
    NSString *_tempId;
    FSFAMILYTREEV2PersonProperties *_properties;
    FSFAMILYTREEV2PersonIdentifiers *_identifiers;
    FSFAMILYTREEV2PersonAssertions *_assertions;
    NSArray *_families;
    NSArray *_parents;
    FSFAMILYTREEV2PersonPersonas *_personas;
    FSFAMILYTREEV2PersonRelationships *_relationships;
    FSFAMILYTREEV2Changes *_changes;
}

/**
 * The id of the person.
 */
- (NSString *) requestedId;

/**
 * The id of the person.
 */
- (void) setRequestedId: (NSString *) newRequestedId;

/**
 * The version number for this person.
 */
- (NSString *) version;

/**
 * The version number for this person.
 */
- (void) setVersion: (NSString *) newVersion;

/**
 * The id of the person.
 */
- (NSString *) id;

/**
 * The id of the person.
 */
- (void) setId: (NSString *) newId;

/**
 * In the case of a persona, the id of the person of which this is a persona.
 */
- (NSString *) personId;

/**
 * In the case of a persona, the id of the person of which this is a persona.
 */
- (void) setPersonId: (NSString *) newPersonId;

/**
 * A temporary id for this person (e.g. for a person not persisted yet).
 */
- (NSString *) tempId;

/**
 * A temporary id for this person (e.g. for a person not persisted yet).
 */
- (void) setTempId: (NSString *) newTempId;

/**
 * A collection of properties for this person.
 */
- (FSFAMILYTREEV2PersonProperties *) properties;

/**
 * A collection of properties for this person.
 */
- (void) setProperties: (FSFAMILYTREEV2PersonProperties *) newProperties;

/**
 * A collection of identifiers for this person.
 */
- (FSFAMILYTREEV2PersonIdentifiers *) identifiers;

/**
 * A collection of identifiers for this person.
 */
- (void) setIdentifiers: (FSFAMILYTREEV2PersonIdentifiers *) newIdentifiers;

/**
 * A collection of assertions for this person.
 */
- (FSFAMILYTREEV2PersonAssertions *) assertions;

/**
 * A collection of assertions for this person.
 */
- (void) setAssertions: (FSFAMILYTREEV2PersonAssertions *) newAssertions;

/**
 * A collection of families for this person.
 */
- (NSArray *) families;

/**
 * A collection of families for this person.
 */
- (void) setFamilies: (NSArray *) newFamilies;

/**
 * A collection of parents for this person.
 */
- (NSArray *) parents;

/**
 * A collection of parents for this person.
 */
- (void) setParents: (NSArray *) newParents;

/**
 * A collection of persona references for this person.
 */
- (FSFAMILYTREEV2PersonPersonas *) personas;

/**
 * A collection of persona references for this person.
 */
- (void) setPersonas: (FSFAMILYTREEV2PersonPersonas *) newPersonas;

/**
 * The relationships.
 */
- (FSFAMILYTREEV2PersonRelationships *) relationships;

/**
 * The relationships.
 */
- (void) setRelationships: (FSFAMILYTREEV2PersonRelationships *) newRelationships;

/**
 * A list of changes to the person
 */
- (FSFAMILYTREEV2Changes *) changes;

/**
 * A list of changes to the person
 */
- (void) setChanges: (FSFAMILYTREEV2Changes *) newChanges;
@end /* interface FSFAMILYTREEV2Person */

/**
 *  A FamilyTree parents.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2ParentsReference : NSObject
{
  @private
    enum FSFAMILYTREEV2AssertionAction *_action;
    NSArray *_parents;
}

/**
 * The action.
 */
- (enum FSFAMILYTREEV2AssertionAction *) action;

/**
 * The action.
 */
- (void) setAction: (enum FSFAMILYTREEV2AssertionAction *) newAction;

/**
 * A collection of parents for this family.
 */
- (NSArray *) parents;

/**
 * A collection of parents for this family.
 */
- (void) setParents: (NSArray *) newParents;
@end /* interface FSFAMILYTREEV2ParentsReference */

/**
 *  Authority normalized place.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2NormalizedPlace : NSObject
{
  @private
    NSString *_id;
    NSString *_version;
    NSString *_value;
}

/**
 * The place authority id.
 */
- (NSString *) id;

/**
 * The place authority id.
 */
- (void) setId: (NSString *) newId;

/**
 * The place authority version.
 */
- (NSString *) version;

/**
 * The place authority version.
 */
- (void) setVersion: (NSString *) newVersion;

/**
 * The value.
 */
- (NSString *) value;

/**
 * The value.
 */
- (void) setValue: (NSString *) newValue;
@end /* interface FSFAMILYTREEV2NormalizedPlace */

/**
 *  @author Ryan Heaton

 */
@interface FSFAMILYTREEV2MatchResults : NSObject
{
  @private
    NSString *_id;
    int _count;
    NSArray *_results;
    FSFAMILYTREEV2SearchMatchParameters *_query;
}

/**
 * The id of the person to which the matches are applicable.
 */
- (NSString *) id;

/**
 * The id of the person to which the matches are applicable.
 */
- (void) setId: (NSString *) newId;

/**
 * The count of matches.
 */
- (int) count;

/**
 * The count of matches.
 */
- (void) setCount: (int) newCount;

/**
 * The matches.
 */
- (NSArray *) results;

/**
 * The matches.
 */
- (void) setResults: (NSArray *) newResults;

/**
 * query parameters
 */
- (FSFAMILYTREEV2SearchMatchParameters *) query;

/**
 * query parameters
 */
- (void) setQuery: (FSFAMILYTREEV2SearchMatchParameters *) newQuery;
@end /* interface FSFAMILYTREEV2MatchResults */

/**
 *  An Assertion Comment.

 @author Ryan Heaton
 @author Rob Lyon

 */
@interface FSFAMILYTREEV2Citation : NSObject
{
  @private
    enum FSFAMILYTREEV2CitationType *_type;
    NSString *_id;
    enum FSFAMILYTREEV2AssertionAction *_action;
    NSString *_tempId;
    FSFAMILYTREEV2EntityReference *_person;
    NSArray *_parents;
    NSArray *_spouses;
    FSFAMILYTREEV2EntityReference *_child;
    FSFAMILYTREEV2EntityReference *_assertion;
    FSFAMILYTREEV2EntityReference *_contributor;
    FSFAMILYTREEV2EntityReference *_submitter;
    enum FSFAMILYTREEV2AssertionDisposition *_disposition;
    BOOL *_primarySource;
    BOOL *_directEvidence;
    NSString *_entryDate;
    NSArray *_fields;
    FSFAMILYTREEV2Source *_source;
    NSString *_comment;
}

/**
 * citation type
 */
- (enum FSFAMILYTREEV2CitationType *) type;

/**
 * citation type
 */
- (void) setType: (enum FSFAMILYTREEV2CitationType *) newType;

/**
 * The id of the citation.
 */
- (NSString *) id;

/**
 * The id of the citation.
 */
- (void) setId: (NSString *) newId;

/**
 * The action.
 */
- (enum FSFAMILYTREEV2AssertionAction *) action;

/**
 * The action.
 */
- (void) setAction: (enum FSFAMILYTREEV2AssertionAction *) newAction;

/**
 * A temporary id for this citation (e.g. for a citation not persisted yet).
 */
- (NSString *) tempId;

/**
 * A temporary id for this citation (e.g. for a citation not persisted yet).
 */
- (void) setTempId: (NSString *) newTempId;

/**
 * The persona id for this citation
 */
- (FSFAMILYTREEV2EntityReference *) person;

/**
 * The persona id for this citation
 */
- (void) setPerson: (FSFAMILYTREEV2EntityReference *) newPerson;

/**
 * The parent ids for this citation
 */
- (NSArray *) parents;

/**
 * The parent ids for this citation
 */
- (void) setParents: (NSArray *) newParents;

/**
 * The spouse ids for this citation
 */
- (NSArray *) spouses;

/**
 * The spouse ids for this citation
 */
- (void) setSpouses: (NSArray *) newSpouses;

/**
 * The child id for this citation
 */
- (FSFAMILYTREEV2EntityReference *) child;

/**
 * The child id for this citation
 */
- (void) setChild: (FSFAMILYTREEV2EntityReference *) newChild;

/**
 * assertionId
 */
- (FSFAMILYTREEV2EntityReference *) assertion;

/**
 * assertionId
 */
- (void) setAssertion: (FSFAMILYTREEV2EntityReference *) newAssertion;

/**
 * a reference to the contributor of the change.
 */
- (FSFAMILYTREEV2EntityReference *) contributor;

/**
 * a reference to the contributor of the change.
 */
- (void) setContributor: (FSFAMILYTREEV2EntityReference *) newContributor;

/**
 * a reference to the submitter.
 */
- (FSFAMILYTREEV2EntityReference *) submitter;

/**
 * a reference to the submitter.
 */
- (void) setSubmitter: (FSFAMILYTREEV2EntityReference *) newSubmitter;

/**
 * the assertion assertion.
 */
- (enum FSFAMILYTREEV2AssertionDisposition *) disposition;

/**
 * the assertion assertion.
 */
- (void) setDisposition: (enum FSFAMILYTREEV2AssertionDisposition *) newDisposition;

/**
 * (no documentation provided)
 */
- (BOOL *) primarySource;

/**
 * (no documentation provided)
 */
- (void) setPrimarySource: (BOOL *) newPrimarySource;

/**
 * (no documentation provided)
 */
- (BOOL *) directEvidence;

/**
 * (no documentation provided)
 */
- (void) setDirectEvidence: (BOOL *) newDirectEvidence;

/**
 * (no documentation provided)
 */
- (NSString *) entryDate;

/**
 * (no documentation provided)
 */
- (void) setEntryDate: (NSString *) newEntryDate;

/**
 * citation fields.
 */
- (NSArray *) fields;

/**
 * citation fields.
 */
- (void) setFields: (NSArray *) newFields;

/**
 * The citation source.
 */
- (FSFAMILYTREEV2Source *) source;

/**
 * The citation source.
 */
- (void) setSource: (FSFAMILYTREEV2Source *) newSource;

/**
 * The citation comment.
 */
- (NSString *) comment;

/**
 * The citation comment.
 */
- (void) setComment: (NSString *) newComment;
@end /* interface FSFAMILYTREEV2Citation */

/**
 *  @author Rob Lyon

 */
@interface FSFAMILYTREEV2Change : NSObject
{
  @private
    NSString *_id;
    enum FSFAMILYTREEV2ChangeType *_type;
    FSFAMILYTREEV2ChangeAction *_action;
    FSFAMILYTREEV2EntityReference *_parent;
    NSArray *_sources;
    NSArray *_results;
    NSArray *_previous;
    FSFAMILYTREEV2EntityReference *_contributor;
    FSFAMILYTREEV2EntityReference *_submitter;
    NSDate *_timestamp;
}

/**
 * the change id.
 */
- (NSString *) id;

/**
 * the change id.
 */
- (void) setId: (NSString *) newId;

/**
 * the change type.
 */
- (enum FSFAMILYTREEV2ChangeType *) type;

/**
 * the change type.
 */
- (void) setType: (enum FSFAMILYTREEV2ChangeType *) newType;

/**
 * the change action.
 */
- (FSFAMILYTREEV2ChangeAction *) action;

/**
 * the change action.
 */
- (void) setAction: (FSFAMILYTREEV2ChangeAction *) newAction;

/**
 * the change parent id.
 */
- (FSFAMILYTREEV2EntityReference *) parent;

/**
 * the change parent id.
 */
- (void) setParent: (FSFAMILYTREEV2EntityReference *) newParent;

/**
 * a list of person references in a change entry.
 */
- (NSArray *) sources;

/**
 * a list of person references in a change entry.
 */
- (void) setSources: (NSArray *) newSources;

/**
 * a list of references to the resulting persons of the change.
 */
- (NSArray *) results;

/**
 * a list of references to the resulting persons of the change.
 */
- (void) setResults: (NSArray *) newResults;

/**
 * a list of references to the previous extract persons of the change.
 */
- (NSArray *) previous;

/**
 * a list of references to the previous extract persons of the change.
 */
- (void) setPrevious: (NSArray *) newPrevious;

/**
 * a reference to the contributor of the change.
 */
- (FSFAMILYTREEV2EntityReference *) contributor;

/**
 * a reference to the contributor of the change.
 */
- (void) setContributor: (FSFAMILYTREEV2EntityReference *) newContributor;

/**
 * a reference to the submitter of the change.
 */
- (FSFAMILYTREEV2EntityReference *) submitter;

/**
 * a reference to the submitter of the change.
 */
- (void) setSubmitter: (FSFAMILYTREEV2EntityReference *) newSubmitter;

/**
 * the timestamp of the change.
 */
- (NSDate *) timestamp;

/**
 * the timestamp of the change.
 */
- (void) setTimestamp: (NSDate *) newTimestamp;
@end /* interface FSFAMILYTREEV2Change */

/**
 *  An assertion.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2Assertion : NSObject
{
  @private
    NSString *_id;
    enum FSFAMILYTREEV2AssertionAction *_action;
    NSString *_tempId;
    NSString *_version;
    BOOL *_modifiable;
    enum FSFAMILYTREEV2AssertionDisposition *_disposition;
    NSDate *_modified;
    FSFAMILYTREEV2ValueSelection *_selected;
    NSArray *_contributors;
    NSArray *_personas;
    NSArray *_notes;
    NSArray *_citations;
}

/**
 * the id of the assertion.
 */
- (NSString *) id;

/**
 * the id of the assertion.
 */
- (void) setId: (NSString *) newId;

/**
 * The action.
 */
- (enum FSFAMILYTREEV2AssertionAction *) action;

/**
 * The action.
 */
- (void) setAction: (enum FSFAMILYTREEV2AssertionAction *) newAction;

/**
 * A temporary id for this person (e.g. for a person not persisted yet).
 */
- (NSString *) tempId;

/**
 * A temporary id for this person (e.g. for a person not persisted yet).
 */
- (void) setTempId: (NSString *) newTempId;

/**
 * The version for this assertion.
 */
- (NSString *) version;

/**
 * The version for this assertion.
 */
- (void) setVersion: (NSString *) newVersion;

/**
 * Whether this is a modifiable assertion.
 */
- (BOOL *) modifiable;

/**
 * Whether this is a modifiable assertion.
 */
- (void) setModifiable: (BOOL *) newModifiable;

/**
 * the assertion assertion.
 */
- (enum FSFAMILYTREEV2AssertionDisposition *) disposition;

/**
 * the assertion assertion.
 */
- (void) setDisposition: (enum FSFAMILYTREEV2AssertionDisposition *) newDisposition;

/**
 * The modified timestamp for this assertion.
 */
- (NSDate *) modified;

/**
 * The modified timestamp for this assertion.
 */
- (void) setModified: (NSDate *) newModified;

/**
 * The selection information.
 */
- (FSFAMILYTREEV2ValueSelection *) selected;

/**
 * The selection information.
 */
- (void) setSelected: (FSFAMILYTREEV2ValueSelection *) newSelected;

/**
 * The contributors.
 */
- (NSArray *) contributors;

/**
 * The contributors.
 */
- (void) setContributors: (NSArray *) newContributors;

/**
 * The personas.
 */
- (NSArray *) personas;

/**
 * The personas.
 */
- (void) setPersonas: (NSArray *) newPersonas;

/**
 * the note references.
 */
- (NSArray *) notes;

/**
 * the note references.
 */
- (void) setNotes: (NSArray *) newNotes;

/**
 * the citation references.
 */
- (NSArray *) citations;

/**
 * the citation references.
 */
- (void) setCitations: (NSArray *) newCitations;
@end /* interface FSFAMILYTREEV2Assertion */

/**
 *  A user of the new FamilySearch.

 @author Ryan Heaton

 */
@interface FSFAMILYTREEV2User : FSFAMILYTREEV2Contact
{
  @private
    NSString *_preferredName;
    NSString *_accessNumber;
    NSArray *_permissions;
    FSFAMILYTREEV2Proxy *_proxy;
    NSArray *_preferences;
    NSArray *_roles;
}

/**
 * The preferred name of the user.
 */
- (NSString *) preferredName;

/**
 * The preferred name of the user.
 */
- (void) setPreferredName: (NSString *) newPreferredName;

/**
 * The helper access number.
 */
- (NSString *) accessNumber;

/**
 * The helper access number.
 */
- (void) setAccessNumber: (NSString *) newAccessNumber;

/**
 * The user's permissions.
 */
- (NSArray *) permissions;

/**
 * The user's permissions.
 */
- (void) setPermissions: (NSArray *) newPermissions;

/**
 * The current proxy for the user.
 */
- (FSFAMILYTREEV2Proxy *) proxy;

/**
 * The current proxy for the user.
 */
- (void) setProxy: (FSFAMILYTREEV2Proxy *) newProxy;

/**
 * the user preferences.
 */
- (NSArray *) preferences;

/**
 * the user preferences.
 */
- (void) setPreferences: (NSArray *) newPreferences;

/**
 * Not used.
 */
- (NSArray *) roles;

/**
 * Not used.
 */
- (void) setRoles: (NSArray *) newRoles;
@end /* interface FSFAMILYTREEV2User */

/**
 *  A person used for displaying seach results.

 @author Ryan Heaton

 */
@interface FSFAMILYTREEV2SearchPerson : FSFAMILYTREEV2Person
{
  @private
    NSString *_minBirthYear;
    NSString *_maxDeathYear;
}

/**
 * The minimum birth year for this person.
 */
- (NSString *) minBirthYear;

/**
 * The minimum birth year for this person.
 */
- (void) setMinBirthYear: (NSString *) newMinBirthYear;

/**
 * The maximum death year for this person.
 */
- (NSString *) maxDeathYear;

/**
 * The maximum death year for this person.
 */
- (void) setMaxDeathYear: (NSString *) newMaxDeathYear;
@end /* interface FSFAMILYTREEV2SearchPerson */

/**
 *  The existence of a person or relationship.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2ExistsAssertion : FSFAMILYTREEV2Assertion
{
  @private
    FSFAMILYTREEV2ExistsValue *_value;
}

/**
 * The value for this assertion.
 */
- (FSFAMILYTREEV2ExistsValue *) value;

/**
 * The value for this assertion.
 */
- (void) setValue: (FSFAMILYTREEV2ExistsValue *) newValue;
@end /* interface FSFAMILYTREEV2ExistsAssertion */

/**
 *  An exists value.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2ExistsValue : FSFAMILYTREEV2AssertionValue
{
  @private
}
@end /* interface FSFAMILYTREEV2ExistsValue */

/**
 *  A Family Tree persona reference.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2PersonaReference : FSFAMILYTREEV2EntityReference
{
  @private
    enum FSFAMILYTREEV2AssertionDisposition *_disposition;
    NSArray *_spouses;
    NSArray *_parents;
    FSFAMILYTREEV2PersonReference *_child;
}

/**
 * (no documentation provided)
 */
- (enum FSFAMILYTREEV2AssertionDisposition *) disposition;

/**
 * (no documentation provided)
 */
- (void) setDisposition: (enum FSFAMILYTREEV2AssertionDisposition *) newDisposition;

/**
 * (no documentation provided)
 */
- (NSArray *) spouses;

/**
 * (no documentation provided)
 */
- (void) setSpouses: (NSArray *) newSpouses;

/**
 * (no documentation provided)
 */
- (NSArray *) parents;

/**
 * (no documentation provided)
 */
- (void) setParents: (NSArray *) newParents;

/**
 * (no documentation provided)
 */
- (FSFAMILYTREEV2PersonReference *) child;

/**
 * (no documentation provided)
 */
- (void) setChild: (FSFAMILYTREEV2PersonReference *) newChild;
@end /* interface FSFAMILYTREEV2PersonaReference */

/**
 *  A Family Tree person reference.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2PersonReference : FSFAMILYTREEV2EntityReference
{
  @private
    enum FSFAMILYTREEV2GenderType *_gender;
}

/**
 * The gender of the person.
 */
- (enum FSFAMILYTREEV2GenderType *) gender;

/**
 * The gender of the person.
 */
- (void) setGender: (enum FSFAMILYTREEV2GenderType *) newGender;
@end /* interface FSFAMILYTREEV2PersonReference */

/**
 *  A Family Tree person reference.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2PersonPersona : FSFAMILYTREEV2EntityReference
{
  @private
    NSArray *_contributors;
}

/**
 * The contributors.
 */
- (NSArray *) contributors;

/**
 * The contributors.
 */
- (void) setContributors: (NSArray *) newContributors;
@end /* interface FSFAMILYTREEV2PersonPersona */

/**
 *  An ordinance of a person.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2OrdinanceAssertion : FSFAMILYTREEV2Assertion
{
  @private
    BOOL *_official;
    FSFAMILYTREEV2OrdinanceValue *_value;
}

/**
 * Whether this is an official assertion.
 */
- (BOOL *) official;

/**
 * Whether this is an official assertion.
 */
- (void) setOfficial: (BOOL *) newOfficial;

/**
 * The value for this assertion.
 */
- (FSFAMILYTREEV2OrdinanceValue *) value;

/**
 * The value for this assertion.
 */
- (void) setValue: (FSFAMILYTREEV2OrdinanceValue *) newValue;
@end /* interface FSFAMILYTREEV2OrdinanceAssertion */

/**
 *  An ordinance value.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2OrdinanceValue : FSFAMILYTREEV2AssertionValue
{
  @private
    enum FSFAMILYTREEV2OrdinanceType *_type;
    NSString *_temple;
    FSFAMILYTREEV2GenDate *_date;
    FSFAMILYTREEV2Place *_place;
    NSArray *_parents;
}

/**
 * The type of the ordinance.
 */
- (enum FSFAMILYTREEV2OrdinanceType *) type;

/**
 * The type of the ordinance.
 */
- (void) setType: (enum FSFAMILYTREEV2OrdinanceType *) newType;

/**
 * The temple code if the ordinance was performed in a temple.
 */
- (NSString *) temple;

/**
 * The temple code if the ordinance was performed in a temple.
 */
- (void) setTemple: (NSString *) newTemple;

/**
 * The date the assertion occurred.
 */
- (FSFAMILYTREEV2GenDate *) date;

/**
 * The date the assertion occurred.
 */
- (void) setDate: (FSFAMILYTREEV2GenDate *) newDate;

/**
 * The place the assertion occurred.
 */
- (FSFAMILYTREEV2Place *) place;

/**
 * The place the assertion occurred.
 */
- (void) setPlace: (FSFAMILYTREEV2Place *) newPlace;

/**
 * the parents in a sealing.
 */
- (NSArray *) parents;

/**
 * the parents in a sealing.
 */
- (void) setParents: (NSArray *) newParents;
@end /* interface FSFAMILYTREEV2OrdinanceValue */

/**
 *  A name value.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2NameValue : FSFAMILYTREEV2AssertionValue
{
  @private
    enum FSFAMILYTREEV2NameType *_type;
    NSArray *_forms;
}

/**
 * The type of this name.
 */
- (enum FSFAMILYTREEV2NameType *) type;

/**
 * The type of this name.
 */
- (void) setType: (enum FSFAMILYTREEV2NameType *) newType;

/**
 * The name forms.
 */
- (NSArray *) forms;

/**
 * The name forms.
 */
- (void) setForms: (NSArray *) newForms;
@end /* interface FSFAMILYTREEV2NameValue */

/**
 *  A name of a person.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2NameAssertion : FSFAMILYTREEV2Assertion
{
  @private
    FSFAMILYTREEV2NameValue *_value;
}

/**
 * The value for this assertion.
 */
- (FSFAMILYTREEV2NameValue *) value;

/**
 * The value for this assertion.
 */
- (void) setValue: (FSFAMILYTREEV2NameValue *) newValue;
@end /* interface FSFAMILYTREEV2NameAssertion */

/**
 *  @author Ryan Heaton

 */
@interface FSFAMILYTREEV2MatchResult : FSFAMILYTREEV2SearchResult
{
  @private
    enum FSFAMILYTREEV2MatchConfidence *_confidence;
}

/**
 * The confidence of the match.
 */
- (enum FSFAMILYTREEV2MatchConfidence *) confidence;

/**
 * The confidence of the match.
 */
- (void) setConfidence: (enum FSFAMILYTREEV2MatchConfidence *) newConfidence;
@end /* interface FSFAMILYTREEV2MatchResult */

/**
 *  A gender value.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2GenderValue : FSFAMILYTREEV2AssertionValue
{
  @private
    enum FSFAMILYTREEV2GenderType *_type;
}

/**
 * The type of the gender.
 */
- (enum FSFAMILYTREEV2GenderType *) type;

/**
 * The type of the gender.
 */
- (void) setType: (enum FSFAMILYTREEV2GenderType *) newType;
@end /* interface FSFAMILYTREEV2GenderValue */

/**
 *  A gender of a person.

 @author Ryan Heaton

 */
@interface FSFAMILYTREEV2GenderAssertion : FSFAMILYTREEV2Assertion
{
  @private
    FSFAMILYTREEV2GenderValue *_value;
}

/**
 * The value for this assertion.
 */
- (FSFAMILYTREEV2GenderValue *) value;

/**
 * The value for this assertion.
 */
- (void) setValue: (FSFAMILYTREEV2GenderValue *) newValue;
@end /* interface FSFAMILYTREEV2GenderAssertion */

/**
 *  An event value.

 @author Ryan Heaton

 */
@interface FSFAMILYTREEV2EventValue : FSFAMILYTREEV2AssertionValue
{
  @private
    enum FSFAMILYTREEV2EventType *_type;
    NSString *_description;
    FSFAMILYTREEV2GenDate *_date;
    FSFAMILYTREEV2Place *_place;
}

/**
 * The type of the event.
 */
- (enum FSFAMILYTREEV2EventType *) type;

/**
 * The type of the event.
 */
- (void) setType: (enum FSFAMILYTREEV2EventType *) newType;

/**
 * The description of the event.
 */
- (NSString *) description;

/**
 * The description of the event.
 */
- (void) setDescription: (NSString *) newDescription;

/**
 * The date the assertion occurred.
 */
- (FSFAMILYTREEV2GenDate *) date;

/**
 * The date the assertion occurred.
 */
- (void) setDate: (FSFAMILYTREEV2GenDate *) newDate;

/**
 * The place the assertion occurred.
 */
- (FSFAMILYTREEV2Place *) place;

/**
 * The place the assertion occurred.
 */
- (void) setPlace: (FSFAMILYTREEV2Place *) newPlace;
@end /* interface FSFAMILYTREEV2EventValue */

/**
 *  An event of a person.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2EventAssertion : FSFAMILYTREEV2Assertion
{
  @private
    FSFAMILYTREEV2EventValue *_value;
}

/**
 * The value for this assertion.
 */
- (FSFAMILYTREEV2EventValue *) value;

/**
 * The value for this assertion.
 */
- (void) setValue: (FSFAMILYTREEV2EventValue *) newValue;
@end /* interface FSFAMILYTREEV2EventAssertion */

/**
 *  A Family Tree contributor reference.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2ContributorReference : FSFAMILYTREEV2EntityReference
{
  @private
    enum FSFAMILYTREEV2AssertionDisposition *_disposition;
    FSFAMILYTREEV2EntityReference *_submitter;
}

/**
 * (no documentation provided)
 */
- (enum FSFAMILYTREEV2AssertionDisposition *) disposition;

/**
 * (no documentation provided)
 */
- (void) setDisposition: (enum FSFAMILYTREEV2AssertionDisposition *) newDisposition;

/**
 * (no documentation provided)
 */
- (FSFAMILYTREEV2EntityReference *) submitter;

/**
 * (no documentation provided)
 */
- (void) setSubmitter: (FSFAMILYTREEV2EntityReference *) newSubmitter;
@end /* interface FSFAMILYTREEV2ContributorReference */

/**
 *  A contributor of information to new FamilySearch.

 @author Ryan Heaton

 */
@interface FSFAMILYTREEV2Contributor : FSFAMILYTREEV2Contact
{
  @private
    NSArray *_aliases;
}

/**
 * The user aliases.
 */
- (NSArray *) aliases;

/**
 * The user aliases.
 */
- (void) setAliases: (NSArray *) newAliases;
@end /* interface FSFAMILYTREEV2Contributor */

/**
 *  A characteristic value.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2CharacteristicValue : FSFAMILYTREEV2AssertionValue
{
  @private
    enum FSFAMILYTREEV2CharacteristicType *_type;
    enum FSFAMILYTREEV2LineageType *_lineage;
    NSString *_detail;
    FSFAMILYTREEV2GenDate *_date;
    FSFAMILYTREEV2Place *_place;
}

/**
 * The type of the characteristic.
 */
- (enum FSFAMILYTREEV2CharacteristicType *) type;

/**
 * The type of the characteristic.
 */
- (void) setType: (enum FSFAMILYTREEV2CharacteristicType *) newType;

/**
 * The lineage.
 */
- (enum FSFAMILYTREEV2LineageType *) lineage;

/**
 * The lineage.
 */
- (void) setLineage: (enum FSFAMILYTREEV2LineageType *) newLineage;

/**
 * The generic value of this characteristic.
 */
- (NSString *) detail;

/**
 * The generic value of this characteristic.
 */
- (void) setDetail: (NSString *) newDetail;

/**
 * The date the assertion occurred.
 */
- (FSFAMILYTREEV2GenDate *) date;

/**
 * The date the assertion occurred.
 */
- (void) setDate: (FSFAMILYTREEV2GenDate *) newDate;

/**
 * The place the assertion occurred.
 */
- (FSFAMILYTREEV2Place *) place;

/**
 * The place the assertion occurred.
 */
- (void) setPlace: (FSFAMILYTREEV2Place *) newPlace;
@end /* interface FSFAMILYTREEV2CharacteristicValue */

/**
 *  A characteristic of a person.

 @author Rob Lyon

 */
@interface FSFAMILYTREEV2CharacteristicAssertion : FSFAMILYTREEV2Assertion
{
  @private
    FSFAMILYTREEV2CharacteristicValue *_value;
}

/**
 * The value for this assertion.
 */
- (FSFAMILYTREEV2CharacteristicValue *) value;

/**
 * The value for this assertion.
 */
- (void) setValue: (FSFAMILYTREEV2CharacteristicValue *) newValue;
@end /* interface FSFAMILYTREEV2CharacteristicAssertion */

/**
 * (no documentation provided)
 */
@interface FSV1BasicProperty : NSObject
{
  @private
    NSString *_name;
    NSString *_value;
}

/**
 * (no documentation provided)
 */
- (NSString *) name;

/**
 * (no documentation provided)
 */
- (void) setName: (NSString *) newName;

/**
 * (no documentation provided)
 */
- (NSString *) value;

/**
 * (no documentation provided)
 */
- (void) setValue: (NSString *) newValue;
@end /* interface FSV1BasicProperty */

/**
 * (no documentation provided)
 */
@interface FSV1BasicError : NSObject
{
  @private
    enum FSV1ErrorLevel *_level;
    int *_subcode;
    int _code;
    NSString *_details;
    NSString *_message;
}

/**
 * (no documentation provided)
 */
- (enum FSV1ErrorLevel *) level;

/**
 * (no documentation provided)
 */
- (void) setLevel: (enum FSV1ErrorLevel *) newLevel;

/**
 * (no documentation provided)
 */
- (int *) subcode;

/**
 * (no documentation provided)
 */
- (void) setSubcode: (int *) newSubcode;

/**
 * (no documentation provided)
 */
- (int) code;

/**
 * (no documentation provided)
 */
- (void) setCode: (int) newCode;

/**
 * (no documentation provided)
 */
- (NSString *) details;

/**
 * (no documentation provided)
 */
- (void) setDetails: (NSString *) newDetails;

/**
 * (no documentation provided)
 */
- (NSString *) message;

/**
 * (no documentation provided)
 */
- (void) setMessage: (NSString *) newMessage;
@end /* interface FSV1BasicError */

/**
 * (no documentation provided)
 */
@interface FSV1BasicElement : NSObject
{
  @private
    int *_statusCode;
    BOOL *_deprecated;
    NSString *_statusMessage;
    NSString *_version;
    NSArray *_errors;
    NSArray *_properties;
}

/**
 * (no documentation provided)
 */
- (int *) statusCode;

/**
 * (no documentation provided)
 */
- (void) setStatusCode: (int *) newStatusCode;

/**
 * (no documentation provided)
 */
- (BOOL *) deprecated;

/**
 * (no documentation provided)
 */
- (void) setDeprecated: (BOOL *) newDeprecated;

/**
 * (no documentation provided)
 */
- (NSString *) statusMessage;

/**
 * (no documentation provided)
 */
- (void) setStatusMessage: (NSString *) newStatusMessage;

/**
 * (no documentation provided)
 */
- (NSString *) version;

/**
 * (no documentation provided)
 */
- (void) setVersion: (NSString *) newVersion;

/**
 * (no documentation provided)
 */
- (NSArray *) errors;

/**
 * (no documentation provided)
 */
- (void) setErrors: (NSArray *) newErrors;

/**
 * (no documentation provided)
 */
- (NSArray *) properties;

/**
 * (no documentation provided)
 */
- (void) setProperties: (NSArray *) newProperties;
@end /* interface FSV1BasicElement */

/**
 *  @author Rob Lyon

 */
@interface FSFAMILYTREEV2FamilyTreeStatus : NSObject
{
  @private
    int _code;
    int *_subcode;
    NSString *_message;
    FSFAMILYTREEV2EntityReference *_person;
    FSFAMILYTREEV2EntityReference *_persona;
    FSFAMILYTREEV2EntityReference *_assertion;
    NSString *_details;
}

/**
 * (no documentation provided)
 */
- (int) code;

/**
 * (no documentation provided)
 */
- (void) setCode: (int) newCode;

/**
 * (no documentation provided)
 */
- (int *) subcode;

/**
 * (no documentation provided)
 */
- (void) setSubcode: (int *) newSubcode;

/**
 * (no documentation provided)
 */
- (NSString *) message;

/**
 * (no documentation provided)
 */
- (void) setMessage: (NSString *) newMessage;

/**
 * Reference to the person to which the error applies.
 */
- (FSFAMILYTREEV2EntityReference *) person;

/**
 * Reference to the person to which the error applies.
 */
- (void) setPerson: (FSFAMILYTREEV2EntityReference *) newPerson;

/**
 * Reference to the persona to which the error applies.
 */
- (FSFAMILYTREEV2EntityReference *) persona;

/**
 * Reference to the persona to which the error applies.
 */
- (void) setPersona: (FSFAMILYTREEV2EntityReference *) newPersona;

/**
 * The assertion to which this error applies.
 */
- (FSFAMILYTREEV2EntityReference *) assertion;

/**
 * The assertion to which this error applies.
 */
- (void) setAssertion: (FSFAMILYTREEV2EntityReference *) newAssertion;

/**
 * (no documentation provided)
 */
- (NSString *) details;

/**
 * (no documentation provided)
 */
- (void) setDetails: (NSString *) newDetails;
@end /* interface FSFAMILYTREEV2FamilyTreeStatus */

/**
 *  @author Ryan Heaton

 */
@interface FSFAMILYTREEV1FamilyTree : FSV1BasicElement <EnunciateXML>
{
  @private
}
@end /* interface FSFAMILYTREEV1FamilyTree */

/**
 *  @author Rob Lyon

 */
@interface FSFAMILYTREEV2FamilyTreeProperty : NSObject
{
  @private
    NSString *_name;
    NSString *_value;
}

/**
 * (no documentation provided)
 */
- (NSString *) name;

/**
 * (no documentation provided)
 */
- (void) setName: (NSString *) newName;

/**
 * (no documentation provided)
 */
- (NSString *) value;

/**
 * (no documentation provided)
 */
- (void) setValue: (NSString *) newValue;
@end /* interface FSFAMILYTREEV2FamilyTreeProperty */

/**
 *  @author Rob Lyon

 */
@interface FSFAMILYTREEV2FamilyTree : NSObject <EnunciateXML>
{
  @private
    int *_statusCode;
    BOOL *_deprecated;
    NSString *_statusMessage;
    NSString *_version;
    NSArray *_persons;
    NSArray *_status;
    NSArray *_personas;
    NSArray *_properties;
    NSArray *_users;
    NSArray *_searches;
    NSArray *_matches;
    NSArray *_contributors;
    NSArray *_pedigrees;
    NSArray *_notes;
    NSArray *_citations;
}

/**
 * (no documentation provided)
 */
- (int *) statusCode;

/**
 * (no documentation provided)
 */
- (void) setStatusCode: (int *) newStatusCode;

/**
 * (no documentation provided)
 */
- (BOOL *) deprecated;

/**
 * (no documentation provided)
 */
- (void) setDeprecated: (BOOL *) newDeprecated;

/**
 * (no documentation provided)
 */
- (NSString *) statusMessage;

/**
 * (no documentation provided)
 */
- (void) setStatusMessage: (NSString *) newStatusMessage;

/**
 * (no documentation provided)
 */
- (NSString *) version;

/**
 * (no documentation provided)
 */
- (void) setVersion: (NSString *) newVersion;

/**
 * The persons.
 */
- (NSArray *) persons;

/**
 * The persons.
 */
- (void) setPersons: (NSArray *) newPersons;

/**
 * The status list.
 */
- (NSArray *) status;

/**
 * The status list.
 */
- (void) setStatus: (NSArray *) newStatus;

/**
 * The personas.
 */
- (NSArray *) personas;

/**
 * The personas.
 */
- (void) setPersonas: (NSArray *) newPersonas;

/**
 * The properties.
 */
- (NSArray *) properties;

/**
 * The properties.
 */
- (void) setProperties: (NSArray *) newProperties;

/**
 * The users.
 */
- (NSArray *) users;

/**
 * The users.
 */
- (void) setUsers: (NSArray *) newUsers;

/**
 * The results of a search.
 */
- (NSArray *) searches;

/**
 * The results of a search.
 */
- (void) setSearches: (NSArray *) newSearches;

/**
 * The results of a match operation.
 */
- (NSArray *) matches;

/**
 * The results of a match operation.
 */
- (void) setMatches: (NSArray *) newMatches;

/**
 * The contributors.
 */
- (NSArray *) contributors;

/**
 * The contributors.
 */
- (void) setContributors: (NSArray *) newContributors;

/**
 * The pedigrees.
 */
- (NSArray *) pedigrees;

/**
 * The pedigrees.
 */
- (void) setPedigrees: (NSArray *) newPedigrees;

/**
 * The notes.
 */
- (NSArray *) notes;

/**
 * The notes.
 */
- (void) setNotes: (NSArray *) newNotes;

/**
 * The citations.
 */
- (NSArray *) citations;

/**
 * The citations.
 */
- (void) setCitations: (NSArray *) newCitations;
@end /* interface FSFAMILYTREEV2FamilyTree */
