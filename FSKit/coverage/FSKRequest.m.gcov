        -:    0:Source:/Users/logan/Projects/FSKit/Source/FSKRequest.m
        -:    0:Graph:/Users/logan/Projects/builds/FSKit.build/Coverage/FSKit.build/Objects-normal/ppc/FSKRequest.gcno
        -:    0:Data:/Users/logan/Projects/builds/FSKit.build/Coverage/FSKit.build/Objects-normal/ppc/FSKRequest.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1://
        -:    2://  FSKRequest.m
        -:    3://  FSKit
        -:    4://
        -:    5://  Created by Logan Allred on 1/20/08.
        -:    6://  Copyright 2008 Logan Allred. All rights reserved.
        -:    7://
        -:    8:
        -:    9:#import "FSKRequest.h"
        -:   10:
        -:   11:@implementation FSKRequest
        -:   12:-(id) initWithFamilySearchConnection:(FSKConnection *)aFamilySearchConnection 
        -:   13:					   delegate:(id)aDelegate 
        -:   14:					   selector:(SEL)aSelector
    #####:   15:{
    #####:   16:	self = [super init];
    #####:   17:	familySearchConnection = aFamilySearchConnection;
    #####:   18:	_delegate = aDelegate;// ? aDelegate : self;
    #####:   19:	_selector = aSelector? aSelector : @selector(request:didReturnResponse:);
    #####:   20:	responseData = [[NSMutableData alloc] init];
    #####:   21:	return self;
        -:   22:}
        -:   23:
        -:   24:-(void)dealloc
    #####:   25:{
    #####:   26:	[responseData release];
    #####:   27:	[super dealloc];
        -:   28:}
        -:   29:
        -:   30:/*!
        -:   31:    @method     
        -:   32:    @abstract   Makes a request to a FamilySearch REST API with the provided parameters
        -:   33:    @discussion Uses a URL of the following format <baseURL>/<endpoint>/<version>/<module>/<path>?<parameter1=value1>&<parameter2=value2>
        -:   34:	where the parameters and values are key-value pairs in the provided parameter dictionary
        -:   35:*/
        -:   36:-(void)fetchFamilySearchDataAtEndpoint:(NSString *)endpoint 
        -:   37:							 WithIds:(NSSet *)idList
        -:   38:						  parameters:(NSDictionary *)parameters
    #####:   39:{
    #####:   40:	NSLog(@"%s %@ %@ %@", __PRETTY_FUNCTION__, endpoint, idList, parameters);
        -:   41:
    #####:   42:	NSURL *theURL = [self generateFamilySearchURLAtEndpoint:endpoint WithIds:idList parameters:parameters];
        -:   43:	
        -:   44:	NSURLRequest *urlRequest = [NSURLRequest requestWithURL:theURL 
        -:   45:											 cachePolicy:NSURLRequestReloadIgnoringCacheData 
    #####:   46:										 timeoutInterval:0.1];//[aFamilySearchConnection connectionTimeoutInterval]];
        -:   47:	
    #####:   48:	NSLog(@"connection: %@", [NSURLConnection connectionWithRequest:urlRequest
        -:   49:								  delegate:self]);
        -:   50:}
        -:   51:
        -:   52:
        -:   53:+(void)fetchFamilySearchData:(NSString *)endpoint WithIds:(NSSet *)idList parameters:(NSDictionary *)parameters connection:aFamilySearchConnection delegate:(id)aDelegate selector:(SEL)aSelector
    #####:   54:{
    #####:   55:	NSLog(@"%s", __PRETTY_FUNCTION__);
        -:   56:	FSKRequest *fsRequest = [[FSKRequest alloc] initWithFamilySearchConnection:aFamilySearchConnection
        -:   57:													 delegate:aDelegate
    #####:   58:													 selector:aSelector];
        -:   59:
    #####:   60:	[fsRequest fetchFamilySearchDataAtEndpoint:endpoint
        -:   61:									   WithIds:idList
        -:   62:									parameters:parameters];
        -:   63:}
        -:   64:
        -:   65:-(NSURL *)generateFamilySearchURLAtEndpoint:(NSString *)endpoint 
        -:   66:								    WithIds:(NSSet *)idList
        -:   67:                                 parameters:(NSDictionary *)parameters
    #####:   68:{
    #####:   69:	NSLog(@"%s", __PRETTY_FUNCTION__);
        -:   70:
    #####:   71:	NSMutableDictionary *mutableDictionary = [NSMutableDictionary dictionaryWithDictionary:parameters];
        -:   72:
    #####:   73:	if ([familySearchConnection sessionId])
        -:   74:	{
    #####:   75:		[mutableDictionary setValue:[familySearchConnection sessionId] forKey:@"sessionId"];
        -:   76:	}
        -:   77:	
    #####:   78:	NSMutableString *urlString = [NSMutableString stringWithFormat:@"%@%@", FSAPIServerUrlString, endpoint];
    #####:   79:	if ([idList count] > 0)
        -:   80:	{
    #####:   81:		[urlString appendFormat:@"/%@", [[idList allObjects] componentsJoinedByString:@","]];
        -:   82:	}
    #####:   83:	if ([mutableDictionary count] > 0)
        -:   84:	{
    #####:   85:		[urlString appendFormat:@"?%@", [mutableDictionary webFormEncoded]];
        -:   86:	}
        -:   87:
    #####:   88:	return [NSURL URLWithString:[[urlString encodeURLLegally] autorelease]];
        -:   89:}
        -:   90:
        -:   91:
        -:   92:#pragma mark Accessors
        -:   93:- (id)delegate
    #####:   94:{
    #####:   95:    return _delegate;
        -:   96:}
        -:   97:
        -:   98:- (void)setDelegate:(id)value
    #####:   99:{
    #####:  100:    if (_delegate != value)
        -:  101:	{
    #####:  102:        _delegate = value;
        -:  103:    }
        -:  104:}
        -:  105:
        -:  106:#pragma mark NSURLConnection delegate methods
        -:  107:-(void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response
    #####:  108:{
    #####:  109:	NSLog(@"%s %@ %d %@ headers:\n%@", __PRETTY_FUNCTION__, response, [(NSHTTPURLResponse*)response statusCode], [NSHTTPURLResponse localizedStringForStatusCode:[(NSHTTPURLResponse*)response statusCode]], [(NSHTTPURLResponse*)response allHeaderFields]);
    #####:  110:	if ([(NSHTTPURLResponse*)response statusCode] == 401)
        -:  111:	{
    #####:  112:		[familySearchConnection setNeedsAuthentication:YES];
        -:  113:	}
        -:  114:}
        -:  115:
        -:  116:-(void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data
    #####:  117:{
    #####:  118:	NSLog(@"%s %@", __PRETTY_FUNCTION__, data);
    #####:  119:	[responseData appendData:data];
        -:  120:}
        -:  121:
        -:  122:-(void)connectionDidFinishLoading:(NSURLConnection *)connection
    #####:  123:{	
    #####:  124:	NSLog(@"%s", __PRETTY_FUNCTION__);
    #####:  125:	NSError *error = nil;
        -:  126:	NSXMLDocument *returnXML = [[NSXMLDocument alloc] initWithData:responseData
        -:  127:														   options:nil
    #####:  128:															 error:&error];
        -:  129:
    #####:  130:	if (returnXML == nil || error != nil)
        -:  131:	{
    #####:  132:		NSLog(@"Error parsing XML: %@", error);
        -:  133:	}
        -:  134:
    #####:  135:	if([_delegate respondsToSelector:_selector])
        -:  136:	{
    #####:  137:		[_delegate performSelector:_selector withObject:returnXML];
        -:  138:	}
        -:  139:
    #####:  140:   [self release];
        -:  141:}
        -:  142:
        -:  143:- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error
    #####:  144:{
    #####:  145:	NSLog(@"%s %@", __PRETTY_FUNCTION__, error);
    #####:  146:	if([_delegate respondsToSelector:@selector(request:didFailWithError:)])
        -:  147:	{
    #####:  148:		[_delegate request:self didFailWithError:[[FSKError alloc] initWithError:error]];
        -:  149:	}
        -:  150:}
        -:  151:
        -:  152:-(void)connection:(NSURLConnection *)connection
        -:  153:       didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge
    #####:  154:{
    #####:  155:	NSLog(@"%s", __PRETTY_FUNCTION__);
        -:  156:	// Should only occur on login requests, all others will receive a 401
        -:  157:	//
        -:  158:	// there are several ways to handle authentication from least to most involvement;
        -:  159:	// 1. use the default keychain (we would never get here)
        -:  160:	// 2. use our own custom keychain (not worry about it now)
        -:  161:	// 3. use the provided credentials in the connection
        -:  162:	// 4. have the app delegate handle the authentication event directly
        -:  163:	// 5. pop up a dialog/sheet and ask the user for credentials
        -:  164:	// 
        -:  165:	// in the end we need the challenge cancelled or provided with credentials  
        -:  166:	
        -:  167:	// 3. use provided credential
    #####:  168:	if ([familySearchConnection credential])
        -:  169:	{
    #####:  170:		[[challenge sender] useCredential:[familySearchConnection credential] forAuthenticationChallenge:challenge];
    #####:  171:		return;
        -:  172:	}
        -:  173:
        -:  174:	// 4. have the app delegate handle it
    #####:  175:    if ([_delegate respondsToSelector:@selector(request:didReceiveAuthenticationChallenge:)])
        -:  176:	{
    #####:  177:		[_delegate request:self didReceiveAuthenticationChallenge:challenge];
    #####:  178:		return;
        -:  179:    }
        -:  180:	
        -:  181:	// 5. do it ourselves
        -:  182:	// until I know what to do, just cancel
    #####:  183:	[[challenge sender] cancelAuthenticationChallenge:challenge];
        -:  184://	[self handleAuthenticationChallenge:challenge];
        -:  185:}
        -:  186:
        -:  187:
        -:  188:- (void)connection:(NSURLConnection *)connection didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge
    #####:  189:{
    #####:  190:	NSLog(@"%s %@", __PRETTY_FUNCTION__, challenge);
        -:  191:}
        -:  192:@end
        -:  193:
        -:  194:#pragma mark -
        -:  195:#pragma mark Delegate Methods
        -:  196:
        -:  197:@implementation NSObject (FSKRequestDelegate)
        -:  198:
    #####:  199:- (void)request:(FSKRequest *)request didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge;
        -:  200:{
    #####:  201:	NSLog(@"FSKRequest %s %@", __PRETTY_FUNCTION__, challenge);
        -:  202://	[self handleAuthenticationChallenge:challenge];
        -:  203:}
        -:  204:
    #####:  205:- (NSWindow *)windowForAuthenticationSheet:(FSKRequest *)request;
        -:  206:{
    #####:  207:	NSLog(@"FSKRequest %s %@", __PRETTY_FUNCTION__, request);
    #####:  208:	return [NSApp mainWindow];
        -:  209:}
        -:  210:
    #####:  211:- (void)request:(FSKRequest *)request didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge;
        -:  212:{
    #####:  213:	NSLog(@"FSKRequest %s %@", __PRETTY_FUNCTION__, challenge);
        -:  214:}
        -:  215:
    #####:  216:- (void)request:(FSKRequest *)request didReturnResponse:(FSKResponse *)response;
        -:  217:{
    #####:  218:	NSLog(@"FSKRequest %s %@", __PRETTY_FUNCTION__, response);
        -:  219:}
        -:  220:
    #####:  221:- (void)request:(FSKRequest *)request didFailWithError:(FSKError *)error;
        -:  222:{
    #####:  223:	NSLog(@"FSKRequest %s %@", __PRETTY_FUNCTION__, error);
        -:  224:}
        -:  225:
        -:  226:@end
        -:  227:
